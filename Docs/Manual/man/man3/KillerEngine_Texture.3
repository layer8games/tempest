.TH "KillerEngine::Texture" 3 "Sat Jun 1 2019" "Killer Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KillerEngine::Texture
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Texture\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTexture\fP (void)"
.br
.ti -1c
.RI "\fBTexture\fP (string filePath)"
.br
.ti -1c
.RI "\fBTexture\fP (GLuint id, \fBS32\fP width, \fBS32\fP height)"
.br
.ti -1c
.RI "\fBTexture\fP (const \fBTexture\fP &T)"
.br
.ti -1c
.RI "\fBTexture\fP (const \fBTexture\fP *T)"
.br
.ti -1c
.RI "\fB~Texture\fP (void)"
.br
.ti -1c
.RI "GLuint \fBGetHandle\fP (void) const"
.br
.ti -1c
.RI "void \fBSetHandle\fP (GLuint h)"
.br
.ti -1c
.RI "\fBS32\fP \fBGetWidth\fP (void) const"
.br
.ti -1c
.RI "void \fBSetWidth\fP (\fBS32\fP w)"
.br
.ti -1c
.RI "\fBS32\fP \fBGetHeight\fP (void) const"
.br
.ti -1c
.RI "void \fBSetHeight\fP (\fBS32\fP h)"
.br
.ti -1c
.RI "\fBTexture\fP & \fBoperator=\fP (const \fBTexture\fP &T)"
.br
.ti -1c
.RI "\fBTexture\fP & \fBoperator=\fP (const \fBTexture\fP *T)"
.br
.ti -1c
.RI "void \fBLoadTexture\fP (string filePath, bool generateMipMaps=true)"
.br
.ti -1c
.RI "void \fBBind\fP (bool state=true, GLuint texUnit=0) const"
.br
.ti -1c
.RI "void \fBUnBind\fP (void) const"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "GLuint \fB_handle\fP"
.br
.RI "ID used by OpenGL as handle to the memory this \fBTexture\fP takes up on the GPU\&. "
.ti -1c
.RI "\fBS32\fP \fB_width\fP"
.br
.RI "Width of the \fBTexture\fP\&. Not currently used for anything\&. Storing just for record keeping I guess\&. "
.ti -1c
.RI "\fBS32\fP \fB_height\fP"
.br
.RI "Height of the \fBTexture\fP\&. Not currently used for anything\&. Storing just for record keeping\&. "
.in -1c
.SH "Detailed Description"
.PP 
The \fBTexture\fP class is used to save and hold information about a texture that has already been loaded into memory\&. It used the SOIL library to save the \fBTexture\fP data into OpenGL, along with several wrappers to work with that data\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Texture::Texture (void)"
Sets all values to 0 by default\&. 
.SS "Texture::Texture (string filePath)\fC [explicit]\fP"
Calls LoadTexture to set up \fBTexture\fP at creation 
.PP
\fBParameters:\fP
.RS 4
\fIfilePath\fP is used to generate \fBTexture\fP\&. 
.RE
.PP

.SS "Texture::Texture (GLuint id, \fBS32\fP width, \fBS32\fP height)"
Sets values up based on existing data\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP is an existing OpenGL handle that can be used\&. 
.br
\fIwidth\fP is the total width in pixels of the \fBTexture\fP\&. 
.br
\fIheight\fP is the total height in pixels of the \fBTexture\fP\&. 
.RE
.PP

.SS "Texture::Texture (const \fBTexture\fP & T)"
Copy from T into \fBTexture\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIT\fP is the texture to copy by ref\&. 
.RE
.PP

.SS "Texture::Texture (const \fBTexture\fP * T)"
Copy from T into \fBTexture\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIT\fP is the pointer to copy\&. 
.RE
.PP

.SS "Texture::~Texture (void)"
Calls glDeleteTextures to clean up memory\&. 
.SH "Member Function Documentation"
.PP 
.SS "void Texture::Bind (bool state = \fCtrue\fP, GLuint texUnit = \fC0\fP) const"
Binds or Unbinds the \fBTexture\fP to the designated texUnit in OpenGL\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP controls if we are binding or unbinding\&. True (default) means binding, false means unbinding\&. 
.br
\fItexUnit\fP specifies which texUnit gets the \fBTexture\fP in OpenGL, if you are using multiple textures on a single object\&. 0 by default\&. 
.RE
.PP

.SS "GLuint KillerEngine::Texture::GetHandle (void) const\fC [inline]\fP"
Returns the handle to the OpenGL memory of the \fBTexture\fP\&. 
.SS "\fBS32\fP KillerEngine::Texture::GetHeight (void) const\fC [inline]\fP"
Returns the height of the \fBTexture\fP\&. 
.SS "\fBS32\fP KillerEngine::Texture::GetWidth (void) const\fC [inline]\fP"
Returns the Width of the \fBTexture\fP\&. 
.SS "void Texture::LoadTexture (string filePath, bool generateMipMaps = \fCtrue\fP)"
Uses SOIL to generate and save a \fBTexture\fP\&. SOIL will load the data needed, then OpenGL is used to set up an handle to the memory in the GPU for the \fBTexture\fP to be used later\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfilePath\fP is the path on the hardrive to image to Open\&. This is relative to your working directory\&. 
.br
\fIgenerateMipMaps\fP allows you to control if OpenGL performs the operations needed to create mipmaps\&. True by default\&. 
.RE
.PP

.SS "\fBTexture\fP & Texture::operator= (const \fBTexture\fP & T)"
Assignment from ref\&. Copies all data as expected\&. 
.PP
\fBParameters:\fP
.RS 4
\fIT\fP is the ref to copy\&. 
.RE
.PP

.SS "\fBTexture\fP & Texture::operator= (const \fBTexture\fP * T)"
Assignment from pointer\&. Copies all data as expected\&. 
.PP
\fBParameters:\fP
.RS 4
\fIT\fP is the pointer to copy\&. 
.RE
.PP

.SS "void KillerEngine::Texture::SetHandle (GLuint h)\fC [inline]\fP"
Sets the handle to a new OpenGL memory handle\&. 
.PP
\fBParameters:\fP
.RS 4
\fIh\fP is the new OpenGL handle ID to use\&. 
.RE
.PP

.SS "void KillerEngine::Texture::SetHeight (\fBS32\fP h)\fC [inline]\fP"
Sets the height of the \fBTexture\fP\&. Use with care! This is not a value that can just be scaled at random\&. 
.PP
\fBParameters:\fP
.RS 4
\fIh\fP is the new height\&. 
.RE
.PP

.SS "void KillerEngine::Texture::SetWidth (\fBS32\fP w)\fC [inline]\fP"
Sets the width of the \fBTexture\fP\&. Use with care! This is not a value that can just be scaled at random\&. 
.PP
\fBParameters:\fP
.RS 4
\fIw\fP is the new width\&. 
.RE
.PP

.SS "void Texture::UnBind (void) const"
Unbinds the \fBTexture\fP from OpenGL\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Killer Engine from the source code\&.
