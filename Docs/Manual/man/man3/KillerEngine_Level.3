.TH "KillerEngine::Level" 3 "Sat Jun 15 2019" "Killer Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KillerEngine::Level
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Level\&.h>\fP
.PP
Inherited by \fBBoxes::Ballistics\fP, \fBBoxes::Demo3D\fP, \fBBoxes::FireworksDemo\fP, \fBBoxes::MainMenu\fP, \fBBoxes::MovingBoxes\fP, \fBBoxes::SplashScreen\fP, \fBBoxes::Springs\fP, and \fBTestLevel\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLevel\fP (void)"
.br
.ti -1c
.RI "virtual \fB~Level\fP (void)"
.br
.ti -1c
.RI "virtual void \fBv_Init\fP (void)=0"
.br
.ti -1c
.RI "virtual void \fBv_Update\fP (void)=0"
.br
.ti -1c
.RI "virtual void \fBv_Render\fP (void)"
.br
.ti -1c
.RI "void \fBUpdateLevel\fP (void)"
.br
.ti -1c
.RI "void \fBAddObjectToLevel\fP (const \fBGameObject\fP &obj)"
.br
.ti -1c
.RI "void \fBAddObjectToLevel\fP (p_GameObject obj)"
.br
.ti -1c
.RI "void \fBRegisterRigidBody2DForce\fP (KP::p_RigidBody2D body, KP::p_ForceGenerator generator)"
.br
.ti -1c
.RI "void \fBAddTextToLevel\fP (const \fBText\fP &text)"
.br
.ti -1c
.RI "void \fBAddTextToLevel\fP (shared_ptr< \fBText\fP > text)"
.br
.ti -1c
.RI "void \fBRemoveObjectFromLevel\fP (\fBU32\fP id)"
.br
.ti -1c
.RI "void \fBUpdateObjects\fP (void)"
.br
.ti -1c
.RI "void \fBRenderObjects\fP (void)"
.br
.ti -1c
.RI "template<class T > void \fBSetObjectUniforms\fP (string name, const T &type)"
.br
.ti -1c
.RI "void \fBSetBackgroundColor\fP (const \fBColor\fP &c)"
.br
.ti -1c
.RI "void \fBActivateBackgroundColor\fP (void)"
.br
.ti -1c
.RI "\fBS32\fP \fBGetWidth\fP (void) const"
.br
.ti -1c
.RI "\fBS32\fP \fBGetHeight\fP (void) const"
.br
.ti -1c
.RI "void \fBSetWidth\fP (\fBS32\fP w)"
.br
.ti -1c
.RI "void \fBSetHeight\fP (\fBS32\fP h)"
.br
.ti -1c
.RI "void \fBSetDimensions\fP (\fBS32\fP w, \fBS32\fP h)"
.br
.ti -1c
.RI "void \fBSetTopBorder\fP (\fBS32\fP top)"
.br
.ti -1c
.RI "void \fBSetBottomBorder\fP (\fBS32\fP bottom)"
.br
.ti -1c
.RI "void \fBSetRightBorder\fP (\fBS32\fP right)"
.br
.ti -1c
.RI "void \fBSetLeftBorder\fP (\fBS32\fP left)"
.br
.ti -1c
.RI "void \fBSetBorders\fP (\fBS32\fP top, \fBS32\fP bottom, \fBS32\fP right, \fBS32\fP left)"
.br
.ti -1c
.RI "\fBS32\fP \fBGetTopBorder\fP (void) const"
.br
.ti -1c
.RI "\fBS32\fP \fBGetBottomBorder\fP (void) const"
.br
.ti -1c
.RI "\fBS32\fP \fBGetLeftBorder\fP (void) const"
.br
.ti -1c
.RI "\fBS32\fP \fBGetRightBorder\fP (void) const"
.br
.ti -1c
.RI "void \fBSetDepth\fP (\fBS32\fP d)"
.br
.ti -1c
.RI "\fBS32\fP \fBGetDepth\fP (void)"
.br
.ti -1c
.RI "void \fBSetNearBorder\fP (\fBS32\fP n)"
.br
.ti -1c
.RI "void \fBSetFarBorder\fP (\fBS32\fP f)"
.br
.ti -1c
.RI "\fBS32\fP \fBGetNearBorder\fP (void)"
.br
.ti -1c
.RI "\fBS32\fP \fBGetFarBorder\fP (void)"
.br
.ti -1c
.RI "void \fBSetID\fP (\fBU32\fP id)"
.br
.ti -1c
.RI "\fBU32\fP \fBGetID\fP (void) const"
.br
.ti -1c
.RI "void \fBSetCamera\fP (\fBCamera\fP *cam)"
.br
.ti -1c
.RI "const \fBCamera\fP * \fBGetCamera\fP (void)"
.br
.ti -1c
.RI "void \fBSetCameraOrthographic\fP (void)"
.br
.ti -1c
.RI "void \fBSetCameraOrthographic\fP (\fBF32\fP left, \fBF32\fP right, \fBF32\fP bottom, \fBF32\fP top, \fBF32\fP nearPlane, \fBF32\fP farPlane)"
.br
.ti -1c
.RI "p_GameObject \fBGetGameObject\fP (\fBU32\fP id)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBS32\fP \fB_width\fP"
.br
.RI "Total width of the play area in the \fBLevel\fP\&. Enforced only by convention\&. "
.ti -1c
.RI "\fBS32\fP \fB_height\fP"
.br
.RI "Total height of the play area in the \fBLevel\fP\&. Enforced only by convention\&. "
.ti -1c
.RI "\fBS32\fP \fB_topBorder\fP"
.br
.RI "Optional 'north' border of the \fBLevel\fP\&. "
.ti -1c
.RI "\fBS32\fP \fB_bottomBorder\fP"
.br
.RI "Optional 'south' border of the \fBLevel\fP\&. "
.ti -1c
.RI "\fBS32\fP \fB_rightBorder\fP"
.br
.RI "Optional 'east' border of the \fBLevel\fP\&. "
.ti -1c
.RI "\fBS32\fP \fB_leftBorder\fP"
.br
.RI "Optional 'west' border of the \fBLevel\fP\&. "
.ti -1c
.RI "\fBS32\fP \fB_depth\fP"
.br
.RI "Total depth of the play area in the \fBLevel\fP\&. "
.ti -1c
.RI "\fBS32\fP \fB_nearBorder\fP"
.br
.RI "Optional close border of the \fBLevel\fP\&. "
.ti -1c
.RI "\fBS32\fP \fB_farBorder\fP"
.br
.RI "Optional far border of the \fBLevel\fP\&. "
.ti -1c
.RI "\fBColor\fP \fB_bgColor\fP"
.br
.RI "\fBColor\fP used for the background of the rendering window\&. "
.ti -1c
.RI "\fBU32\fP \fB_ID\fP"
.br
.RI "ID used in the \fBLevelManager\fP\&. "
.ti -1c
.RI "\fBCamera\fP * \fB_camera\fP"
.br
.RI "Pointer to a \fBCamera\fP object\&. "
.ti -1c
.RI "std::map< \fBU32\fP, p_GameObject > \fB_gameObjects\fP"
.br
.RI "List of all GameObjects included in the \fBLevel\fP\&. "
.ti -1c
.RI "\fBKP::ForceRegistry\fP \fB_forceRegistry\fP"
.br
.RI "\fBKillerPhysics::ForceRegistry\fP used to allow physics forces to be applied\&. "
.in -1c
.SH "Detailed Description"
.PP 
The \fBLevel\fP is the building block for game project\&. It holds all of the objects that will be rendered to the screen and controls what the update logic is\&. The \fBLevel\fP itself is an abstract class, intended to be implemented on the user end\&. Some engines will call this a scene or a world\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Level::Level (void)"
Sets call values to 0 and calls default constructors\&. 
.SS "Level::~Level (void)\fC [virtual]\fP"
Deletes the pointer to the \fBCamera\fP\&. 
.SH "Member Function Documentation"
.PP 
.SS "void KillerEngine::Level::ActivateBackgroundColor (void)\fC [inline]\fP"
Forces the current background color to be activated in OpenGL\&. 
.SS "void Level::AddObjectToLevel (const \fBGameObject\fP & obj)"
Converts the ref to a smart_ptr and adds the \fBGameObject\fP to the \fBLevel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP is the object to be added\&. 
.RE
.PP

.SS "void KillerEngine::Level::AddObjectToLevel (p_GameObject obj)"
Adds \fBGameObject\fP pointer to the \fBLevel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP is the pointer to be added\&. 
.RE
.PP

.SS "void Level::AddTextToLevel (const \fBText\fP & text)"
Adds the Glyphs in a \fBText\fP to the \fBLevel\fP as GameObjects\&. 
.PP
\fBParameters:\fP
.RS 4
\fItext\fP is the \fBText\fP to get the Glyphs from\&. 
.RE
.PP

.SS "void Level::AddTextToLevel (shared_ptr< \fBText\fP > text)"
Adds the Glyphs in a \fBText\fP to the \fBLevel\fP as GameObjects\&. 
.PP
\fBParameters:\fP
.RS 4
\fItext\fP is shared pointer \fBText\fP to get the Glyphs from\&. 
.RE
.PP

.SS "\fBS32\fP KillerEngine::Level::GetBottomBorder (void) const\fC [inline]\fP"
Returns the bottom border\&. 
.SS "const \fBCamera\fP* KillerEngine::Level::GetCamera (void)\fC [inline]\fP"
Returns the current \fBCamera\fP\&. 
.SS "\fBS32\fP KillerEngine::Level::GetDepth (void)\fC [inline]\fP"
Returns the depth of the play area\&. 
.SS "\fBS32\fP KillerEngine::Level::GetFarBorder (void)\fC [inline]\fP"
Returns the far border of the play area\&. 
.SS "shared_ptr< \fBGameObject\fP > Level::GetGameObject (\fBU32\fP id)"
Returns \fBGameObject\fP with ID\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP is the ID of the object to get\&. Should coorespond to GameObject::_ID\&. 
.RE
.PP

.SS "\fBS32\fP KillerEngine::Level::GetHeight (void) const\fC [inline]\fP"
Returns the height of the play area of the \fBLevel\fP\&. 
.SS "\fBU32\fP KillerEngine::Level::GetID (void) const\fC [inline]\fP"
Returns the \fBLevel\fP ID\&. This will only match the \fBLevelManager\fP ID if you set it correctly\&. 
.SS "\fBS32\fP KillerEngine::Level::GetLeftBorder (void) const\fC [inline]\fP"
Returns the left border\&. 
.SS "\fBS32\fP KillerEngine::Level::GetNearBorder (void)\fC [inline]\fP"
Returns the near border of the play area\&. 
.SS "\fBS32\fP KillerEngine::Level::GetRightBorder (void) const\fC [inline]\fP"
Returns the right border\&. 
.SS "\fBS32\fP KillerEngine::Level::GetTopBorder (void) const\fC [inline]\fP"
Returns the top border\&. 
.SS "\fBS32\fP KillerEngine::Level::GetWidth (void) const\fC [inline]\fP"
Returns the width of the play area of the \fBLevel\fP\&. 
.SS "void KillerEngine::Level::RegisterRigidBody2DForce (KP::p_RigidBody2D body, KP::p_ForceGenerator generator)\fC [inline]\fP"
Registers a \fBKillerPhysics::RigidBody2D\fP with a KillerPhysics::ForcerGenerator\&. This only works because they are pointers\&. 
.PP
\fBParameters:\fP
.RS 4
\fIRigidBody2D\fP is the pointer that needs to be registered with the generator\&. 
.br
\fIgenerator\fP is the force to apply to the RigidBody2D\&. 
.RE
.PP

.SS "void Level::RemoveObjectFromLevel (\fBU32\fP id)"
Removes the \fBGameObject\fP with id from the \fBLevel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP of the \fBGameObject\fP to remove\&. 
.RE
.PP

.SS "void Level::RenderObjects (void)"
Loops over all of the \fBGameObject\fP and \fBKillerPhysics::RigidBody2D\fP that have been added to the \fBLevel\fP, and calls GameObject::v_Render if they are active for rendering\&. 
.SS "void KillerEngine::Level::SetBackgroundColor (const \fBColor\fP & c)\fC [inline]\fP"
Changes the set background color for the \fBLevel\fP\&. It also calls \fBLevel::ActivateBackgroundColor\fP 
.SS "void KillerEngine::Level::SetBorders (\fBS32\fP top, \fBS32\fP bottom, \fBS32\fP right, \fBS32\fP left)\fC [inline]\fP"
Helper function to set all borders of the play area of the \fBLevel\fP at the same time\&. 
.PP
\fBParameters:\fP
.RS 4
\fItop\fP is the top border\&. 
.br
\fIbottom\fP is the bottom border\&. 
.br
\fIright\fP is the right border\&. 
.br
\fIleft\fP is the left border\&. 
.RE
.PP

.SS "void KillerEngine::Level::SetBottomBorder (\fBS32\fP bottom)\fC [inline]\fP"
Set the bottom bounds\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbottom\fP is the new border\&. 
.RE
.PP

.SS "void KillerEngine::Level::SetCamera (\fBCamera\fP * cam)\fC [inline]\fP"
Sets the camera to a new \fBCamera\fP pointer, allowing you to change the \fBCamera\fP at run time\&. 
.SS "void KillerEngine::Level::SetCameraOrthographic (void)\fC [inline]\fP"
Wrapper around \fBCamera::SetOrthographic\fP\&. 
.SS "void KillerEngine::Level::SetCameraOrthographic (\fBF32\fP left, \fBF32\fP right, \fBF32\fP bottom, \fBF32\fP top, \fBF32\fP nearPlane, \fBF32\fP farPlane)\fC [inline]\fP"
Wrapper around \fBCamera::SetOrthographic\fP with the same arguments\&. 
.PP
\fBParameters:\fP
.RS 4
\fIleft\fP is the left boundary of the projection\&. 
.br
\fIright\fP is the right boundary of the projection\&. 
.br
\fIbottom\fP is the bottom boundary of the projection\&. 
.br
\fItop\fP is the uppder boundary of the projection\&. 
.br
\fInearPlane\fP is the close boundary of the projection\&. 
.br
\fIfarPlane\fP is the distant boundary of the projection\&. 
.RE
.PP

.SS "void KillerEngine::Level::SetDepth (\fBS32\fP d)\fC [inline]\fP"
Sets the depth of the play area 
.SS "void KillerEngine::Level::SetDimensions (\fBS32\fP w, \fBS32\fP h)\fC [inline]\fP"
Helper function that allows you to change the play area dimensions at the same time\&. 
.SS "void KillerEngine::Level::SetFarBorder (\fBS32\fP f)\fC [inline]\fP"
Sets the far border of the play area\&. 
.SS "void KillerEngine::Level::SetHeight (\fBS32\fP h)\fC [inline]\fP"
Changes the height of the play area of the \fBLevel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIh\fP is the new height\&. 
.RE
.PP

.SS "void KillerEngine::Level::SetID (\fBU32\fP id)\fC [inline]\fP"
Sets a new ID for the \fBLevel\fP\&. Use with caution\&. 
.SS "void KillerEngine::Level::SetLeftBorder (\fBS32\fP left)\fC [inline]\fP"
Set the left bounds\&. 
.PP
\fBParameters:\fP
.RS 4
\fIleft\fP is the new border\&. 
.RE
.PP

.SS "void KillerEngine::Level::SetNearBorder (\fBS32\fP n)\fC [inline]\fP"
Sets the near border of the play area\&. 
.SS "template<class T > void KillerEngine::Level::SetObjectUniforms (string name, const T & type)\fC [inline]\fP"
Loops over all GameObjects and \fBKillerPhysics::RigidBody2D\fP that have bee added to the level and calls GameObject::SetUniform for the type that is passed in\&. This is a template function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP is the name of the uniform to set\&. This must match what is found in the shader\&. 
.br
\fItype\fP is the dynamic type that is passed into the shader\&. 
.RE
.PP

.SS "void KillerEngine::Level::SetRightBorder (\fBS32\fP right)\fC [inline]\fP"
Set the right bounds\&. 
.PP
\fBParameters:\fP
.RS 4
\fIright\fP is the new border\&. 
.RE
.PP

.SS "void KillerEngine::Level::SetTopBorder (\fBS32\fP top)\fC [inline]\fP"
Set the top bounds\&. 
.PP
\fBParameters:\fP
.RS 4
\fItop\fP is the new border\&. 
.RE
.PP

.SS "void KillerEngine::Level::SetWidth (\fBS32\fP w)\fC [inline]\fP"
Changes the width of the play area of the \fBLevel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIw\fP is the new width\&. 
.RE
.PP

.SS "void Level::UpdateLevel (void)"
Default actions that need to be called each frame\&. Right now, that is only Camera::v_Update\&. 
.SS "void Level::UpdateObjects (void)"
Loops over all of the \fBGameObject\fP and \fBKillerPhysics::RigidBody2D\fP that have been added to the \fBLevel\fP, and calls GameObject::v_Update if they are active for updates\&. 
.SS "virtual void KillerEngine::Level::v_Init (void)\fC [pure virtual]\fP"
Abstract function\&. Used to Initialize the default values, instantiate any objects that will be used and generally get things ready to go\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP is the ID used in the \fBLevelManager\fP\&. 
.br
\fIw\fP is the width of the \fBLevel\fP\&. 
.br
\fIh\fP is the height of the \fBLevel\fP\&. 
.RE
.PP

.PP
Implemented in \fBBoxes::MainMenu\fP, \fBTestLevel\fP, \fBBoxes::MovingBoxes\fP, \fBBoxes::SplashScreen\fP, \fBBoxes::Ballistics\fP, \fBBoxes::Springs\fP, \fBBoxes::FireworksDemo\fP, and \fBBoxes::Demo3D\fP\&.
.SS "void Level::v_Render (void)\fC [virtual]\fP"
Wrapper around \fBLevel::RenderObjects\fP\&. It is virtual to allow for optional customization\&. 
.SS "virtual void KillerEngine::Level::v_Update (void)\fC [pure virtual]\fP"
Abstract function\&. Used to control what needs to happen during an update\&. Please note, objects added to the level are already being updated as part of \fBLevel::UpdateLevel\fP\&. 
.PP
Implemented in \fBBoxes::MainMenu\fP, \fBTestLevel\fP, \fBBoxes::MovingBoxes\fP, \fBBoxes::SplashScreen\fP, \fBBoxes::Ballistics\fP, \fBBoxes::Springs\fP, \fBBoxes::FireworksDemo\fP, and \fBBoxes::Demo3D\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Killer Engine from the source code\&.
