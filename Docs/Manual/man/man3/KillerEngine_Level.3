.TH "KillerEngine::Level" 3 "Fri Feb 8 2019" "Killer Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KillerEngine::Level
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Level\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLevel\fP (void)"
.br
.ti -1c
.RI "virtual \fB~Level\fP (void)"
.br
.ti -1c
.RI "virtual void \fBv_InitLevel\fP (U32 id, S32 w, S32 h, \fBColor\fP &c)=0"
.br
.ti -1c
.RI "virtual void \fBv_Update\fP (void)=0"
.br
.ti -1c
.RI "virtual void \fBv_Integrate\fP (void)"
.br
.ti -1c
.RI "virtual void \fBv_Render\fP (void)"
.br
.ti -1c
.RI "void \fBUpdateLevel\fP (void)"
.br
.ti -1c
.RI "void \fBAddObjectToLevel\fP (const \fBGameObject\fP &obj)"
.br
.ti -1c
.RI "void \fBAddObjectToLevel\fP (shared_ptr< \fBGameObject\fP > obj)"
.br
.ti -1c
.RI "void \fBAddParticleToLevel\fP (const \fBKP::Particle\fP &particle)"
.br
.ti -1c
.RI "void \fBAddParticleToLevel\fP (shared_ptr< \fBKP::Particle\fP > particle)"
.br
.ti -1c
.RI "void \fBAddParticleToLevel\fP (shared_ptr< \fBKP::Particle\fP > particle, shared_ptr< \fBKP::ForceGenerator\fP > generator=nullptr)"
.br
.ti -1c
.RI "void \fBRegisterParticleForce\fP (shared_ptr< \fBKP::Particle\fP > particle, shared_ptr< \fBKP::ForceGenerator\fP > generator)"
.br
.ti -1c
.RI "void \fBAddTextToLevel\fP (const \fBText\fP &text)"
.br
.ti -1c
.RI "void \fBRemoveObjectFromLevel\fP (U32 id)"
.br
.ti -1c
.RI "void \fBUpdateObjects\fP (void)"
.br
.ti -1c
.RI "void \fBRenderObjects\fP (void)"
.br
.ti -1c
.RI "void \fBSetBackgroundColor\fP (\fBColor\fP &c)"
.br
.ti -1c
.RI "void \fBActivateBackgroundColor\fP (void)"
.br
.ti -1c
.RI "S32 \fBGetLevelWidth\fP (void) const"
.br
.ti -1c
.RI "S32 \fBGetLevelHeight\fP (void) const"
.br
.ti -1c
.RI "void \fBSetLevelWidth\fP (S32 w)"
.br
.ti -1c
.RI "void \fBSetLevelHeight\fP (S32 h)"
.br
.ti -1c
.RI "void \fBSetLevelDimensions\fP (S32 w, S32 h)"
.br
.ti -1c
.RI "void \fBSetTopBorder\fP (S32 top)"
.br
.ti -1c
.RI "void \fBSetBottomBorder\fP (S32 bottom)"
.br
.ti -1c
.RI "void \fBSetRightBorder\fP (S32 right)"
.br
.ti -1c
.RI "void \fBSetLeftBorder\fP (S32 left)"
.br
.ti -1c
.RI "void \fBSetLevelBorders\fP (S32 top, S32 bottom, S32 right, S32 left)"
.br
.ti -1c
.RI "S32 \fBGetTopBorder\fP (void) const"
.br
.ti -1c
.RI "S32 \fBGetBottomBorder\fP (void) const"
.br
.ti -1c
.RI "S32 \fBGetLeftBorder\fP (void) const"
.br
.ti -1c
.RI "S32 \fBGetRightBorder\fP (void) const"
.br
.ti -1c
.RI "void \fBSetDepth\fP (S32 d)"
.br
.ti -1c
.RI "S32 \fBGetDepth\fP (void)"
.br
.ti -1c
.RI "void \fBSetNearBorder\fP (S32 n)"
.br
.ti -1c
.RI "void \fBSetFarBorder\fP (S32 f)"
.br
.ti -1c
.RI "S32 \fBGetNearBorder\fP (void)"
.br
.ti -1c
.RI "S32 \fBGetFarBorder\fP (void)"
.br
.ti -1c
.RI "void \fBSetID\fP (U32 id)"
.br
.ti -1c
.RI "U32 \fBGetID\fP (void) const"
.br
.ti -1c
.RI "void \fBSetCamera\fP (\fBCamera\fP *cam)"
.br
.ti -1c
.RI "const \fBCamera\fP * \fBGetCamera\fP (void)"
.br
.ti -1c
.RI "void \fBSetCameraOrthographic\fP (void)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "S32 \fB_width\fP"
.br
.RI "Total width of the play area in the \fBLevel\fP\&. Enforced only by convention\&. "
.ti -1c
.RI "S32 \fB_height\fP"
.br
.RI "Total height of the play area in the \fBLevel\fP\&. Enforced only by convention\&. "
.ti -1c
.RI "S32 \fB_topBorder\fP"
.br
.RI "Optional 'north' border of the \fBLevel\fP\&. "
.ti -1c
.RI "S32 \fB_bottomBorder\fP"
.br
.RI "Optional 'south' border of the \fBLevel\fP\&. "
.ti -1c
.RI "S32 \fB_rightBorder\fP"
.br
.RI "Optional 'east' border of the \fBLevel\fP\&. "
.ti -1c
.RI "S32 \fB_leftBorder\fP"
.br
.RI "Optional 'west' border of the \fBLevel\fP\&. "
.ti -1c
.RI "S32 \fB_depth\fP"
.br
.RI "Total depth of the play area in the \fBLevel\fP\&. "
.ti -1c
.RI "S32 \fB_nearBorder\fP"
.br
.RI "Optional close border of the \fBLevel\fP\&. "
.ti -1c
.RI "S32 \fB_farBorder\fP"
.br
.RI "Optional far border of the \fBLevel\fP\&. "
.ti -1c
.RI "\fBColor\fP \fB_bgColor\fP"
.br
.RI "\fBColor\fP used for the background of the rendering window\&. "
.ti -1c
.RI "U32 \fB_ID\fP"
.br
.RI "ID used in the \fBLevelManager\fP\&. "
.ti -1c
.RI "\fBCamera\fP * \fB_camera\fP"
.br
.RI "Pointer to a \fBCamera\fP object\&. "
.ti -1c
.RI "std::map< U32, shared_ptr< \fBGameObject\fP > > \fB_gameObjects\fP"
.br
.RI "List of all GameObjects included in the \fBLevel\fP\&. "
.ti -1c
.RI "std::map< U32, shared_ptr< \fBKP::Particle\fP > > \fB_particles\fP"
.br
.RI "List of all KillerPhysics::Particles in the \fBLevel\fP\&. "
.ti -1c
.RI "\fBKP::ForceRegistry\fP \fB_forceRegistry\fP"
.br
.RI "\fBKillerPhysics::ForceRegistry\fP used to allow physics forces to be applied\&. "
.in -1c
.SH "Detailed Description"
.PP 
The \fBLevel\fP is the building block for game project\&. It holds all of the objects that will be rendered to the screen and controls what the update logic is\&. The \fBLevel\fP itself is an abstract class, intended to be implemented on the user end\&. Some engines will call this a scene or a world\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Level::Level (void)"
Sets call values to 0 and calls default constructors\&. 
.SS "Level::~Level (void)\fC [virtual]\fP"
Deletes the pointer to the \fBCamera\fP\&. 
.SH "Member Function Documentation"
.PP 
.SS "void KillerEngine::Level::ActivateBackgroundColor (void)\fC [inline]\fP"
Forces the current background color to be activated in OpenGL\&. 
.SS "void Level::AddObjectToLevel (const \fBGameObject\fP & obj)"
Converts the ref to a smart_ptr and adds the \fBGameObject\fP to the \fBLevel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP is the object to be added\&. 
.RE
.PP

.SS "void Level::AddObjectToLevel (shared_ptr< \fBGameObject\fP > obj)"
Adds \fBGameObject\fP pointer to the \fBLevel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP is the pointer to be added\&. 
.RE
.PP

.SS "void Level::AddParticleToLevel (const \fBKP::Particle\fP & particle)"
Even though \fBKillerPhysics::Particle\fP is a \fBGameObject\fP, the compiler can't tell the difference\&. This adds the physics object to the \fBLevel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparticle\fP converted to a shared_ptr and added to the level\&. 
.RE
.PP

.SS "void Level::AddParticleToLevel (shared_ptr< \fBKP::Particle\fP > particle)"
Even though \fBKillerPhysics::Particle\fP is a \fBGameObject\fP, the compiler can't tell the difference\&. This adds the physics object to the \fBLevel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparticle\fP is the pointer to be added to the \fBLevel\fP\&. 
.RE
.PP

.SS "void Level::AddParticleToLevel (shared_ptr< \fBKP::Particle\fP > particle, shared_ptr< \fBKP::ForceGenerator\fP > generator = \fCnullptr\fP)"
Helper function that allows to add a \fBKillerPhysics::Particle\fP and register it a force at the same time\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparticle\fP is the pointer to add\&. 
.br
\fIis\fP the optional force to register the particle with\&. 
.RE
.PP

.SS "void Level::AddTextToLevel (const \fBText\fP & text)"
Adds the Glyphs in a \fBText\fP to the \fBLevel\fP as GameObjects\&. 
.PP
\fBParameters:\fP
.RS 4
\fItext\fP is the \fBText\fP to get the Glyphs from\&. 
.RE
.PP

.SS "S32 KillerEngine::Level::GetBottomBorder (void) const\fC [inline]\fP"
Returns the bottom border\&. 
.SS "const \fBCamera\fP* KillerEngine::Level::GetCamera (void)\fC [inline]\fP"
Returns the current \fBCamera\fP\&. 
.SS "S32 KillerEngine::Level::GetDepth (void)\fC [inline]\fP"
Returns the depth of the play area\&. 
.SS "S32 KillerEngine::Level::GetFarBorder (void)\fC [inline]\fP"
Returns the far border of the play area\&. 
.SS "U32 KillerEngine::Level::GetID (void) const\fC [inline]\fP"
Returns the \fBLevel\fP ID\&. This will only match the \fBLevelManager\fP ID if you set it correctly\&. 
.SS "S32 KillerEngine::Level::GetLeftBorder (void) const\fC [inline]\fP"
Returns the left border\&. 
.SS "S32 KillerEngine::Level::GetLevelHeight (void) const\fC [inline]\fP"
Returns the height of the play area of the \fBLevel\fP\&. 
.SS "S32 KillerEngine::Level::GetLevelWidth (void) const\fC [inline]\fP"
Returns the width of the play area of the \fBLevel\fP\&. 
.SS "S32 KillerEngine::Level::GetNearBorder (void)\fC [inline]\fP"
Returns the near border of the play area\&. 
.SS "S32 KillerEngine::Level::GetRightBorder (void) const\fC [inline]\fP"
Returns the right border\&. 
.SS "S32 KillerEngine::Level::GetTopBorder (void) const\fC [inline]\fP"
Returns the top border\&. 
.SS "void KillerEngine::Level::RegisterParticleForce (shared_ptr< \fBKP::Particle\fP > particle, shared_ptr< \fBKP::ForceGenerator\fP > generator)\fC [inline]\fP"
Registers a \fBKillerPhysics::Particle\fP with a KillerPhysics::ForcerGenerator\&. This only works because they are pointers\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparticle\fP is the pointer that needs to be registered with the generator\&. 
.br
\fIgenerator\fP is the force to apply to the particle\&. 
.RE
.PP

.SS "void Level::RemoveObjectFromLevel (U32 id)"
Removes the \fBGameObject\fP with id from the \fBLevel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP of the \fBGameObject\fP to remove\&. 
.RE
.PP

.SS "void Level::RenderObjects (void)"
Loops over all of the \fBGameObject\fP and \fBKillerPhysics::Particle\fP that have been added to the \fBLevel\fP, and calls GameObject::v_Render if they are active for rendering\&. 
.SS "void KillerEngine::Level::SetBackgroundColor (\fBColor\fP & c)\fC [inline]\fP"
Changes the set background color for the \fBLevel\fP\&. It also calls \fBLevel::ActivateBackgroundColor\fP 
.SS "void KillerEngine::Level::SetBottomBorder (S32 bottom)\fC [inline]\fP"
Set the bottom bounds\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbottom\fP is the new border\&. 
.RE
.PP

.SS "void KillerEngine::Level::SetCamera (\fBCamera\fP * cam)\fC [inline]\fP"
Sets the camera to a new \fBCamera\fP pointer, allowing you to change the \fBCamera\fP at run time\&. 
.SS "void KillerEngine::Level::SetCameraOrthographic (void)\fC [inline]\fP"
Wrapper around \fBCamera::SetOrthographic\fP\&. 
.SS "void KillerEngine::Level::SetDepth (S32 d)\fC [inline]\fP"
Sets the depth of the play area 
.SS "void KillerEngine::Level::SetFarBorder (S32 f)\fC [inline]\fP"
Sets the far border of the play area\&. 
.SS "void KillerEngine::Level::SetID (U32 id)\fC [inline]\fP"
Sets a new ID for the \fBLevel\fP\&. Use with caution\&. 
.SS "void KillerEngine::Level::SetLeftBorder (S32 left)\fC [inline]\fP"
Set the left bounds\&. 
.PP
\fBParameters:\fP
.RS 4
\fIleft\fP is the new border\&. 
.RE
.PP

.SS "void KillerEngine::Level::SetLevelBorders (S32 top, S32 bottom, S32 right, S32 left)\fC [inline]\fP"
Helper function to set all borders of the play area of the \fBLevel\fP at the same time\&. 
.PP
\fBParameters:\fP
.RS 4
\fItop\fP is the top border\&. 
.br
\fIbottom\fP is the bottom border\&. 
.br
\fIright\fP is the right border\&. 
.br
\fIleft\fP is the left border\&. 
.RE
.PP

.SS "void KillerEngine::Level::SetLevelDimensions (S32 w, S32 h)\fC [inline]\fP"
Helper function that allows you to change the play area dimensions at the same time\&. 
.SS "void KillerEngine::Level::SetLevelHeight (S32 h)\fC [inline]\fP"
Changes the height of the play area of the \fBLevel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIh\fP is the new height\&. 
.RE
.PP

.SS "void KillerEngine::Level::SetLevelWidth (S32 w)\fC [inline]\fP"
Changes the width of the play area of the \fBLevel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIw\fP is the new width\&. 
.RE
.PP

.SS "void KillerEngine::Level::SetNearBorder (S32 n)\fC [inline]\fP"
Sets the near border of the play area\&. 
.SS "void KillerEngine::Level::SetRightBorder (S32 right)\fC [inline]\fP"
Set the right bounds\&. 
.PP
\fBParameters:\fP
.RS 4
\fIright\fP is the new border\&. 
.RE
.PP

.SS "void KillerEngine::Level::SetTopBorder (S32 top)\fC [inline]\fP"
Set the top bounds\&. 
.PP
\fBParameters:\fP
.RS 4
\fItop\fP is the new border\&. 
.RE
.PP

.SS "void Level::UpdateLevel (void)"
Default actions that need to be called each frame\&. Right now, that is only Camera::v_Update\&. 
.SS "void Level::UpdateObjects (void)"
Loops over all of the \fBGameObject\fP and \fBKillerPhysics::Particle\fP that have been added to the \fBLevel\fP, and calls GameObject::v_Update if they are active for updates\&. 
.SS "virtual void KillerEngine::Level::v_InitLevel (U32 id, S32 w, S32 h, \fBColor\fP & c)\fC [pure virtual]\fP"
Abstract function\&. Used to Initialize the default values, instantiate any objects that will be used and generally get things ready to go\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP is the ID used in the \fBLevelManager\fP\&. 
.br
\fIw\fP is the width of the \fBLevel\fP\&. 
.br
\fIh\fP is the height of the \fBLevel\fP\&. 
.RE
.PP

.SS "void Level::v_Integrate (void)\fC [virtual]\fP"
Abstract function\&. Calls KillerPhysics::ForceRegistry::UpdateForces, then loops over each Physics object, calling KillerPhysics::Particle::v_Integrate function\&. It is virtual to allow for optional customization\&. 
.SS "void Level::v_Render (void)\fC [virtual]\fP"
Wrapper around \fBLevel::RenderObjects\fP\&. It is virtual to allow for optional customization\&. 
.SS "virtual void KillerEngine::Level::v_Update (void)\fC [pure virtual]\fP"
Abstract function\&. Used to control what needs to happen during an update\&. Please note, objects added to the level are already being updated as part of \fBLevel::UpdateLevel\fP\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Killer Engine from the source code\&.
