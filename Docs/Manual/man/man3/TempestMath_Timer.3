.TH "TempestMath::Timer" 3 "Mon Dec 9 2019" "Tempest" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TempestMath::Timer
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Timer\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "TEMPEST_API \fB~Timer\fP (void)"
.br
.RI "Default Destructor\&. Does not do anything\&. "
.ti -1c
.RI "TEMPEST_API void \fBUpdate\fP (void)"
.br
.ti -1c
.RI "TEMPEST_API void \fBSingleStep\fP (void)"
.br
.ti -1c
.RI "void \fBSetClamp\fP (bool state)"
.br
.ti -1c
.RI "bool \fBGetClamp\fP (void) const"
.br
.RI "Returns the current state of _clamp\&. "
.ti -1c
.RI "void \fBSetPaused\fP (bool paused)"
.br
.ti -1c
.RI "bool \fBGetPaused\fP (void) const"
.br
.RI "Returns the state of the _paused flag\&. "
.ti -1c
.RI "void \fBSetTimeScale\fP (\fBF32\fP scale)"
.br
.ti -1c
.RI "\fBF32\fP \fBGetTimeScale\fP (void) const"
.br
.RI "Returns the current value for _timeScale\&. "
.ti -1c
.RI "\fBreal\fP \fBDeltaTime\fP (void) const"
.br
.RI "Returns the current _deltaTime\&. "
.ti -1c
.RI "\fBF64\fP \fBTotalTime\fP (void) const"
.br
.RI "Returns the total time that the program has been running\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static TEMPEST_API shared_ptr< \fBTimer\fP > \fBInstance\fP (void)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBTimer\fP (void)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBF64\fP \fB_QueryCounter\fP (void)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "bool \fB_clamp\fP"
.br
.RI "If clamped, the timer will be forced to lock the framerate at 60 fps\&. "
.ti -1c
.RI "bool \fB_paused\fP"
.br
.RI "If paused, the Update loop will not run, allowing the timer to stop\&. "
.ti -1c
.RI "\fBreal\fP \fB_deltaTime\fP"
.br
.RI "The time that the last frame took to run\&. "
.ti -1c
.RI "\fBreal\fP \fB_timeScale\fP"
.br
.RI "A scale factor that is applied to the delta time\&. "
.ti -1c
.RI "\fBF64\fP \fB_pcFreq\fP"
.br
.RI "The frequency of the processor\&. Used in determining the total time\&. "
.ti -1c
.RI "\fBF64\fP \fB_totalTime\fP"
.br
.RI "The total time that the program has been running\&. "
.ti -1c
.RI "\fBF64\fP \fB_pastTime\fP"
.br
.RI "The time stamp of the last frame\&. "
.ti -1c
.RI "\fBF64\fP \fB_currentTime\fP"
.br
.RI "The time stamp of this frame\&. "
.ti -1c
.RI "\fBS64\fP \fB_counterStart\fP"
.br
.RI "This is the starting point of the counter\&. "
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static shared_ptr< \fBTimer\fP > \fB_instance\fP = NULL"
.br
.RI "Internal reference to self, used in Singleton Pattern\&. "
.in -1c
.SH "Detailed Description"
.PP 
The high precision timer for the Killer1 Engine\&. At the time of writting this the timer is windows specific, but cross platform functionality is planned in the future\&. 
.br
 It uses the GLFW function glfwGetTime, located in the GameWindow to get the total time that the glfw window has been open\&. It used to have a customer frequency timer, but this turned out to be too eratic, and was removed\&. 
.br
 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Timer::Timer (void)\fC [protected]\fP"
Default Constructor, sets _deltaTime and _totalTime to 0, _timeScale to 1, _pastTime to the current time and _currentTime to _pastTime, and _paused to false\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBF64\fP Timer::_QueryCounter (void)\fC [private]\fP"
Wrapper around QueryPerformanceFrequency\&. This will check the processor for how many cycles have passed, saving it into the time keeping variables of the instance\&. 
.SS "shared_ptr< \fBTimer\fP > Timer::Instance (void)\fC [static]\fP"
Singleton pattern function\&. Returns a pointer to the globabl version of the timer\&. This is the only way to use the timer, ensuring that there will only ever be 1 version of it running\&. 
.br
 
.SS "void TempestMath::Timer::SetClamp (bool state)\fC [inline]\fP"
Sets the \fBTimer\fP to be clamped\&. 
.PP
\fBParameters\fP
.RS 4
\fIstate\fP sets the clamp flag\&. 
.RE
.PP

.SS "void TempestMath::Timer::SetPaused (bool paused)\fC [inline]\fP"
Sets the state of the _paused flag\&. 
.PP
\fBParameters\fP
.RS 4
\fIpaused\fP is the state to set\&. 
.RE
.PP

.SS "void TempestMath::Timer::SetTimeScale (\fBF32\fP scale)\fC [inline]\fP"
Sets the _timeScale variable\&. 
.PP
\fBParameters\fP
.RS 4
\fIis\fP the new value for _timeScale\&. 
.RE
.PP

.SS "void Timer::SingleStep (void)"
This will attempt to move _deltaTime forward one single frame, at 60 frames per second\&. Note: Maybe this should be updated to be configurable? 
.SS "void Timer::Update (void)"
This updates the _totalTime and _deltaTime values\&. This is where all of the magic happens\&. Should be called once per frame\&. It called GameWindow::GetTime()\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Tempest from the source code\&.
