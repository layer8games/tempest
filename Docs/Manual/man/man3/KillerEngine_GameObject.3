.TH "KillerEngine::GameObject" 3 "Fri Feb 8 2019" "Killer Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KillerEngine::GameObject
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBKillerEngine::EnvironmentObject\fP, \fBKillerEngine::Glyph\fP, \fBKillerPhysics::Particle\fP, and \fBKillerPhysics::RigidBody\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGameObject\fP (const \fBGameObject\fP &obj)"
.br
.ti -1c
.RI "virtual void \fBv_Update\fP (void)=0"
.br
.ti -1c
.RI "virtual void \fBv_Render\fP (void)"
.br
.ti -1c
.RI "virtual void \fBv_InitBuffers\fP (void)"
.br
.ti -1c
.RI "void \fBUpdateInternals\fP (void)"
.br
.ti -1c
.RI "bool \fBLoadOBJ\fP (string filepath)"
.br
.ti -1c
.RI "void \fBLoadMesh\fP (string filepath)"
.br
.ti -1c
.RI "void \fBMakeSprite\fP (void)"
.br
.ti -1c
.RI "const \fBKM::Matrix\fP & \fBGetModelMatrix\fP (void) const"
.br
.ti -1c
.RI "const \fBKM::Matrix\fP \fBGetModelMatrixRot\fP (void) const"
.br
.ti -1c
.RI "const bool \fBGetActive\fP (void) const"
.br
.ti -1c
.RI "void \fBSetActive\fP (bool state)"
.br
.ti -1c
.RI "void \fBSetActive\fP (void)"
.br
.ti -1c
.RI "void \fBSetInactive\fP (void)"
.br
.ti -1c
.RI "const bool \fBGetActiveUpdate\fP (void) const"
.br
.ti -1c
.RI "void \fBSetActiveUpdate\fP (bool state)"
.br
.ti -1c
.RI "void \fBSetActiveUpdate\fP (void)"
.br
.ti -1c
.RI "void \fBSetInactiveUpdate\fP (void)"
.br
.ti -1c
.RI "const bool \fBGetActiveRender\fP (void) const"
.br
.ti -1c
.RI "void \fBSetActiveRender\fP (bool state)"
.br
.ti -1c
.RI "void \fBSetActiveRender\fP (void)"
.br
.ti -1c
.RI "void \fBSetInactiveRender\fP (void)"
.br
.ti -1c
.RI "bool \fBIsSprite\fP (void) const"
.br
.ti -1c
.RI "const U32 \fBGetID\fP (void) const"
.br
.ti -1c
.RI "const \fBKM::Vector\fP & \fBGetPosition\fP (void) const"
.br
.ti -1c
.RI "void \fBSetPosition\fP (const \fBKM::Vector\fP &pos)"
.br
.ti -1c
.RI "void \fBSetPosition\fP (F32 x, F32 y)"
.br
.ti -1c
.RI "void \fBSetPosition\fP (F32 x, F32 y, F32 z)"
.br
.ti -1c
.RI "void \fBSetPositionX\fP (F32 xval)"
.br
.ti -1c
.RI "void \fBSetPositionY\fP (F32 yVal)"
.br
.ti -1c
.RI "void \fBSetPositionZ\fP (F32 zVal)"
.br
.ti -1c
.RI "void \fBAddScaledPosition\fP (const \fBKM::Vector\fP pos, F32 scale)"
.br
.ti -1c
.RI "const \fBKM::Vector\fP & \fBGetScale\fP (void) const"
.br
.ti -1c
.RI "void \fBSetScale\fP (const \fBKM::Vector\fP &scale)"
.br
.ti -1c
.RI "void \fBSetScale\fP (F32 val)"
.br
.ti -1c
.RI "void \fBSetScale\fP (F32 xVal, F32 yVal)"
.br
.ti -1c
.RI "void \fBSetScale\fP (F32 xVal, F32 yVal, F32 zVal)"
.br
.ti -1c
.RI "const \fBKM::Quaternion\fP & \fBGetOrientation\fP (void) const"
.br
.ti -1c
.RI "void \fBSetOrientation\fP (const \fBKM::Quaternion\fP &q)"
.br
.ti -1c
.RI "void \fBSetOrientation\fP (F32 wVal, F32 xVal, F32 yVal, F32 zVal)"
.br
.ti -1c
.RI "void \fBSetColor\fP (const \fBColor\fP &col)"
.br
.ti -1c
.RI "void \fBSetColor\fP (F32 red, F32 green, F32 blue)"
.br
.ti -1c
.RI "const \fBColor\fP & \fBGetColor\fP (void) const"
.br
.ti -1c
.RI "void \fBSetTexture\fP (shared_ptr< \fBTexture\fP > texture)"
.br
.ti -1c
.RI "shared_ptr< \fBTexture\fP > \fBGetTexture\fP (void) const"
.br
.ti -1c
.RI "void \fBBindTexture\fP (bool state=true)"
.br
.ti -1c
.RI "const shared_ptr< \fBShader\fP > \fBGetShader\fP (void) const"
.br
.ti -1c
.RI "void \fBSetShader\fP (const shared_ptr< \fBShader\fP > shader)"
.br
.ti -1c
.RI "void \fBLoadShader\fP (std::vector< \fBShaderData\fP > shaderData)"
.br
.ti -1c
.RI "void \fBUseShader\fP (bool state=true)"
.br
.ti -1c
.RI "void \fBSetUniform\fP (string name, const F32 val)"
.br
.ti -1c
.RI "void \fBSetUniform\fP (string name, const \fBKM::Vector\fP &vec)"
.br
.ti -1c
.RI "void \fBSetUniformVec3\fP (string name, const \fBKM::Vector\fP &vec)"
.br
.ti -1c
.RI "void \fBSetUniform\fP (string name, const \fBKM::Matrix\fP &mat)"
.br
.ti -1c
.RI "void \fBSetUniformSampler\fP (string name, S32 texSlot)"
.br
.ti -1c
.RI "void \fBSetUniform\fP (string name, const \fBColor\fP &col)"
.br
.ti -1c
.RI "void \fBSetUniformVec3\fP (string name, const \fBColor\fP &col)"
.br
.ti -1c
.RI "U32 \fBGetNumVertices\fP (void)"
.br
.ti -1c
.RI "void \fBAddVertex\fP (const \fBVertex\fP &vert)"
.br
.ti -1c
.RI "void \fBSetVertices\fP (std::vector< \fBVertex\fP > vertices)"
.br
.ti -1c
.RI "std::vector< \fBVertex\fP > \fBGetVertices\fP (void) const"
.br
.ti -1c
.RI "void \fBAddIndex\fP (U32 index)"
.br
.ti -1c
.RI "void \fBSetIndices\fP (std::vector< U32 > indices)"
.br
.ti -1c
.RI "std::vector< U32 > \fBGetIndices\fP (void) const"
.br
.ti -1c
.RI "GLuint \fBGetVAO\fP (void) const"
.br
.ti -1c
.RI "void \fBBindVAO\fP (bool state=true)"
.br
.ti -1c
.RI "void \fBBindVBO\fP (BufferData buffer, bool state=true)"
.br
.ti -1c
.RI "std::vector< F32 > \fBGetUVList\fP (void) const"
.br
.ti -1c
.RI "void \fBSetUVList\fP (std::vector< F32 > list)"
.br
.ti -1c
.RI "void \fBAddUV\fP (F32 val)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBKM::Vector\fP & \fB_AccessPosition\fP (void)"
.br
.ti -1c
.RI "\fBKM::Quaternion\fP & \fB_AccessOrientation\fP (void)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "std::vector< U32 > \fB_SplitU32\fP (string text, char delim) const"
.br
.ti -1c
.RI "std::vector< F32 > \fB_SplitF32\fP (string text, char delim) const"
.br
.ti -1c
.RI "std::vector< string > \fB_SplitString\fP (string text, char delim) const"
.br
.ti -1c
.RI "void \fB_CalculateCachedData\fP (void)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::vector< \fBVertex\fP > \fB_vertices\fP"
.br
.ti -1c
.RI "std::vector< U32 > \fB_indices\fP"
.br
.ti -1c
.RI "std::vector< F32 > \fB_uvList\fP"
.br
.ti -1c
.RI "\fBKM::Matrix\fP \fB_modelTOWorldCache\fP"
.br
.ti -1c
.RI "\fBKM::Vector\fP \fB_position\fP"
.br
.ti -1c
.RI "\fBKM::Vector\fP \fB_scale\fP"
.br
.ti -1c
.RI "\fBKM::Quaternion\fP \fB_orientation\fP"
.br
.ti -1c
.RI "\fBColor\fP \fB_color\fP"
.br
.ti -1c
.RI "shared_ptr< \fBTexture\fP > \fB_texture\fP"
.br
.ti -1c
.RI "shared_ptr< \fBShader\fP > \fB_shader\fP"
.br
.ti -1c
.RI "bool \fB_activeUpdate\fP"
.br
.ti -1c
.RI "bool \fB_activeRender\fP"
.br
.ti -1c
.RI "bool \fB_isSprite\fP"
.br
.ti -1c
.RI "U32 \fB_ID\fP"
.br
.ti -1c
.RI "GLuint \fB_vao\fP"
.br
.ti -1c
.RI "GLuint \fB_vbo\fP [NUM_VBO]"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static U32 \fB_nextID\fP = 1"
.br
.in -1c

.SH "Author"
.PP 
Generated automatically by Doxygen for Killer Engine from the source code\&.
