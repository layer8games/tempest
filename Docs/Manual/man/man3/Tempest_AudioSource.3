.TH "Tempest::AudioSource" 3 "Tue Jan 7 2020" "Tempest" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Tempest::AudioSource
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <AudioSource\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "TEMPEST_API \fBAudioSource\fP (void)"
.br
.ti -1c
.RI "TEMPEST_API \fB~AudioSource\fP (void)"
.br
.RI "Sets the \fBAudioClip\fP that this source has to a nullptr, then deletes its handle with OpenAL\&. "
.ti -1c
.RI "TEMPEST_API void \fBPlay\fP (void)"
.br
.ti -1c
.RI "TEMPEST_API void \fBStop\fP (void)"
.br
.ti -1c
.RI "TEMPEST_API void \fBPause\fP (void)"
.br
.RI "Pauses the clip in its currently play\&. If \fBAudioSource::Play\fP is called again, it will start from its current place\&. "
.ti -1c
.RI "TEMPEST_API void \fBRestart\fP (void)"
.br
.ti -1c
.RI "TEMPEST_API void \fBAddClip\fP (shared_ptr< \fBAudioClip\fP > clip)"
.br
.ti -1c
.RI "TEMPEST_API bool \fBGetPlaying\fP (void) const"
.br
.RI "Returns true if the clip is already playing\&. "
.ti -1c
.RI "TEMPEST_API void \fBSetLooping\fP (bool state)"
.br
.ti -1c
.RI "bool \fBGetLooping\fP (void) const"
.br
.RI "Returns the current looping state of the clip on the source\&. "
.ti -1c
.RI "const \fBU32\fP \fBGetSourceID\fP (void) const"
.br
.RI "Returns the OpenAL source handle\&. "
.ti -1c
.RI "TEMPEST_API void \fBSetPitch\fP (\fBF32\fP pitch)"
.br
.ti -1c
.RI "\fBF32\fP \fBGetPitch\fP (void) const"
.br
.RI "Returns the current pitch level\&. Note, this is the cached version, it does not query OpenAL for this value\&. "
.ti -1c
.RI "TEMPEST_API void \fBSetGain\fP (\fBF32\fP gain)"
.br
.ti -1c
.RI "\fBF32\fP \fBGetGain\fP (void) const"
.br
.RI "Returns the current gain level\&. Note, this is the cached version, it doe snot query OpenAL for this value\&. "
.ti -1c
.RI "TEMPEST_API void \fBSetPosition\fP (const \fBTM::Vector3\fP &pos)"
.br
.ti -1c
.RI "TEMPEST_API void \fBSetPosition\fP (\fBF32\fP xVal, \fBF32\fP yVal, \fBF32\fP zVal)"
.br
.ti -1c
.RI "const \fBTM::Vector3\fP & \fBGetPosition\fP (void) const"
.br
.ti -1c
.RI "TEMPEST_API void \fBSetVelocity\fP (const \fBTM::Vector3\fP &vel)"
.br
.ti -1c
.RI "TEMPEST_API void \fBSetVelocity\fP (\fBF32\fP xVal, \fBF32\fP yVal, \fBF32\fP zVal)"
.br
.ti -1c
.RI "const \fBTM::Vector3\fP & \fBGetVelocity\fP (void) const"
.br
.ti -1c
.RI "const p_AudioClip \fBGetClip\fP (void) const"
.br
.RI "Returns a pointer to the clip this source uses\&. Note this is a const pointer, so you can't write it\&. "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBS32\fP \fB_GetPlayState\fP (void) const"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "bool \fB_looping\fP"
.br
.RI "True if the source should loop when it reaches the end\&. "
.ti -1c
.RI "\fBU32\fP \fB_sourceID\fP"
.br
.RI "OpenAL handle to the source generated in OpenAL\&. "
.ti -1c
.RI "\fBF32\fP \fB_pitch\fP"
.br
.RI "Pitch level for the source\&. "
.ti -1c
.RI "\fBF32\fP \fB_gain\fP"
.br
.RI "Gain level for the source\&. "
.ti -1c
.RI "\fBTM::Vector3\fP \fB_position\fP"
.br
.RI "World space position of the source\&. "
.ti -1c
.RI "\fBTM::Vector3\fP \fB_velocity\fP"
.br
.RI "World space velocity of the source\&. "
.ti -1c
.RI "p_AudioClip \fB_clip\fP"
.br
.RI "\fBAudioClip\fP holds the buffer the plays the sounds\&. Assume one clip per source for now\&. "
.in -1c
.SH "Detailed Description"
.PP 
An \fBAudioSource\fP is the location from which an \fBAudioClip\fP will play\&. This holds a clip, a position, and velocity, and can be told to start, stop or pause its play\&. Currently the source only supports one clip, but later could support many clips in the form of buffers\&. This is a more advanced way to use OpenAL that is currently not supported\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "AudioSource::AudioSource (void)"
Calls \fBAudioManager::Instance\fP to make sure that there is a device and context set up before the source is created with OpenAL\&. It then sets up the source with OpenAL and saves the handle for use later\&. 
.SH "Member Function Documentation"
.PP 
.SS "void AudioSource::AddClip (shared_ptr< \fBAudioClip\fP > clip)"
Sets the clip that this source will use when it is played\&. 
.PP
\fBParameters:\fP
.RS 4
\fIclip\fP is a pointer to the clip that will be played\&. The clip should already have data, using the AudioClip::LoadWAV function\&. If it does not, then this will not play anything\&. 
.RE
.PP

.SS "const \fBTM::Vector3\fP& Tempest::AudioSource::GetPosition (void) const\fC [inline]\fP"
Returns the position of the source\&. This should be in world space\&. Note, this is the cached version, it does not query OpenAL for this value\&. 
.SS "const \fBTM::Vector3\fP& Tempest::AudioSource::GetVelocity (void) const\fC [inline]\fP"
Returns the velocity of the source\&. This should be in world space\&. Note, this is the cached version, it does not query OpenAL for this value\&. 
.SS "void AudioSource::Play (void)"
Plays the clip that this source has\&. If the clip is already playing, nothing happens\&. This is different from what OpenAL does, where it will start a clip over if it is already playing\&. 
.SS "void AudioSource::Restart (void)"
If the clip is already playing, then it will start the clip over from the beginning\&. If it is not currently playing, then it will start playing from the beginning\&. 
.SS "void AudioSource::SetGain (\fBF32\fP gain)"
Sets the gain level for the source\&. This makes a call to OpenAL to set the state in OpenAL\&. 
.PP
\fBParameters:\fP
.RS 4
\fIgain\fP is the new gain level\&. 
.RE
.PP

.SS "void AudioSource::SetLooping (bool state)"
Sets if the clip should loop as it plays\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP should be true if you want the clip to loop, and false if you do not\&. 
.RE
.PP

.SS "void AudioSource::SetPitch (\fBF32\fP pitch)"
Sets the pitch level for the source\&. This makes a call to OpenAL to set the state in OpenAL\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpitch\fP is the new pitch level\&. 
.RE
.PP

.SS "void AudioSource::SetPosition (const \fBTM::Vector3\fP & pos)"
Sets the position of the source in the sound space\&. This should be the same as world space\&. This makes a call to set the position in OpenAL\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP is the new position of the source\&. 
.RE
.PP

.SS "void AudioSource::SetPosition (\fBF32\fP xVal, \fBF32\fP yVal, \fBF32\fP zVal)"
Sets the position of the source in the sound space\&. This should be the same as world space\&. This makes a call to set the position in OpenAL\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxVal\fP is the new x position of the source\&. 
.br
\fIyVal\fP is the new y position of the source\&. 
.br
\fIzVal\fP is the new z position of the source\&. 
.RE
.PP

.SS "void AudioSource::SetVelocity (const \fBTM::Vector3\fP & vel)"
Sets the velocity of the source in the sound space\&. This should be in world space coordinates\&. This makes a call to set the velocity in OpenAL\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvel\fP is the new velocity of the source\&. 
.RE
.PP

.SS "void AudioSource::SetVelocity (\fBF32\fP xVal, \fBF32\fP yVal, \fBF32\fP zVal)"
Sets the velocity of the source in the sound space\&. This should be in world space coordinates\&. This makes a call to set the velocity in OpenAL\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxVal\fP is the new x velocity of the source\&. 
.br
\fIyVal\fP is the new y velocity of the source\&. 
.br
\fIzVal\fP is the new z velocity of the source\&. 
.RE
.PP

.SS "void AudioSource::Stop (void)"
Stops the clip from playing, if it is playing currently\&. If the clip is not playing, it does not do anyything\&. If \fBAudioSource::Play\fP is called again, the clip will begin again from the start\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Tempest from the source code\&.
