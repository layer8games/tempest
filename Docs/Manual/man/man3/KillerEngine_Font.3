.TH "KillerEngine::Font" 3 "Mon Jun 24 2019" "Killer Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KillerEngine::Font
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Font\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBFont\fP (void)"
.br
.ti -1c
.RI "\fBFont\fP (const \fBFont\fP &f)"
.br
.ti -1c
.RI "\fBFont\fP (const \fBFont\fP *f)"
.br
.ti -1c
.RI "void \fBInit\fP (string fontName, string filePath, \fBU32\fP fontSize)"
.br
.ti -1c
.RI "\fBFont\fP & \fBoperator=\fP (const \fBFont\fP *font)"
.br
.ti -1c
.RI "\fBFont\fP & \fBoperator=\fP (const \fBFont\fP &font)"
.br
.ti -1c
.RI "bool \fBGetInitialized\fP (void) const"
.br
.ti -1c
.RI "void \fBSetNumCharacters\fP (\fBS32\fP num)"
.br
.ti -1c
.RI "\fBS32\fP \fBGetNumCharacters\fP (void) const"
.br
.ti -1c
.RI "void \fBSetSize\fP (\fBU32\fP size)"
.br
.ti -1c
.RI "\fBU32\fP \fBGetSize\fP (void) const"
.br
.ti -1c
.RI "void \fBSetName\fP (string fontName)"
.br
.ti -1c
.RI "const string \fBGetName\fP (void) const"
.br
.ti -1c
.RI "CharacterDataMap \fBGetAllCharacterGlyphs\fP (void) const"
.br
.ti -1c
.RI "\fBCharacterData\fP \fBGetCharacterData\fP (char c)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "bool \fB_initialized\fP"
.br
.RI "Initialization state of the \fBFont\fP\&. "
.ti -1c
.RI "\fBS32\fP \fB_numCharacters\fP"
.br
.RI "Number of characters found in the \fBFont\fP\&. 128 for ACCII, 256 for UTF8\&. "
.ti -1c
.RI "\fBU32\fP \fB_fontSize\fP"
.br
.RI "Size of the \fBFont\fP\&. Should be used like a text font for weight\&. "
.ti -1c
.RI "string \fB_fontName\fP"
.br
.RI "Name of the font\&. Not used for anything really\&. "
.ti -1c
.RI "CharacterDataMap \fB_characterGlyphs\fP"
.br
.RI "All data from \&.fnt file stored in a RenderText can use for placement\&. "
.in -1c
.SH "Detailed Description"
.PP 
The \fBFont\fP class is used to open a \&.fnt file, extract the needed character data, and then save that for text processing later on\&.
.PP
CreateCharacter is a CharSprite Factory\&. This may be important to know\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Font::Font (void)"
Default Constructor\&. No special actions taken\&. 
.SS "Font::Font (const \fBFont\fP & f)"
Copy Constructor\&. Calls GetTextureID(), GetFile() and \fBGetName()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIf\fP \fBFont\fP&: \fBFont\fP to be copied\&. 
.RE
.PP

.SS "Font::Font (const \fBFont\fP * f)"
Copy Constructor\&. Calls GetTextureID(), GetFile() and \fBGetName()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIf\fP Font*: \fBFont\fP to be copied\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "CharacterDataMap KillerEngine::Font::GetAllCharacterGlyphs (void) const\fC [inline]\fP"
Returns the map containing all data for all characters found in the loaded font\&. The ID of each character is found in the \&.fnt file and is the ASCII int value of a char 
.SS "\fBCharacterData\fP KillerEngine::Font::GetCharacterData (char c)\fC [inline]\fP"
Returns data for a single character\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP is the desired data character\&. 
.RE
.PP

.SS "bool KillerEngine::Font::GetInitialized (void) const\fC [inline]\fP"
Returns if the \fBFont\fP has been initialized yet\&. This allows for temporary Fonts that have not been fully created yet\&. 
.SS "const string KillerEngine::Font::GetName (void) const\fC [inline]\fP"
Returns the current name of the font\&. Not used in any major way\&. 
.SS "\fBS32\fP KillerEngine::Font::GetNumCharacters (void) const\fC [inline]\fP"
Returns the number of characters found in the font\&. 128 for ACCII, 256 for UTF8\&. 
.SS "\fBU32\fP KillerEngine::Font::GetSize (void) const\fC [inline]\fP"
Returns the current weight of the font\&. 
.SS "void Font::Init (string fontName, string filePath, \fBU32\fP fontSize)"
Initializes the \fBFont\fP based on the file path and size\&. This holds most of the FreeType code that creates everything that is needed for the font\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfontName\fP is the name of the font\&. 
.br
\fIfilePath\fP is the relative path to the font file\&. Should be a ttf file\&. 
.br
\fIfontSize\fP is weight of the font\&. This should match what you'd find in a text editor, ie: 12, 18, 24\&. etc\&. 
.RE
.PP

.SS "\fBFont\fP & Font::operator= (const \fBFont\fP * font)"
Copies \fBFont\fP pointer\&. Calls GetTextureID(), GetFile(), \fBGetName()\fP and \fBGetCharacterData()\fP\&. 
.SS "\fBFont\fP & Font::operator= (const \fBFont\fP & font)"
Copies \fBFont\fP reference\&. Calls GetTextureID(), GetFile(), \fBGetName()\fP and \fBGetCharacterData()\fP\&. 
.SS "void KillerEngine::Font::SetName (string fontName)\fC [inline]\fP"
Set's the name of font\&. Not used actively in any major way\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfontName\fP string: New name of the font\&. 
.RE
.PP

.SS "void KillerEngine::Font::SetNumCharacters (\fBS32\fP num)\fC [inline]\fP"
Sets the number of characters that the font contains\&. 
.PP
\fBParameters:\fP
.RS 4
\fInum\fP is the number of characters\&. Set 128 for ACCII, 256 for UTF8 
.RE
.PP

.SS "void KillerEngine::Font::SetSize (\fBU32\fP size)\fC [inline]\fP"
Sets the weight of the \fBFont\fP\&. Does not re-intialize\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Killer Engine from the source code\&.
