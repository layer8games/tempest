.TH "TempestCollisions::BoundingSphere" 3 "Wed Jan 8 2020" "Tempest" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TempestCollisions::BoundingSphere
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <BoundingSphere\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "TEMPEST_API \fBBoundingSphere\fP (void)"
.br
.RI "Sets center and radius to 0\&. "
.ti -1c
.RI "TEMPEST_API \fBBoundingSphere\fP (const \fBTM::Point\fP &center, \fBreal\fP radius)"
.br
.ti -1c
.RI "TEMPEST_API \fBBoundingSphere\fP (const \fBBoundingSphere\fP &one, const \fBBoundingSphere\fP &two)"
.br
.ti -1c
.RI "TEMPEST_API \fB~BoundingSphere\fP (void)"
.br
.RI "No implementation\&. "
.ti -1c
.RI "TEMPEST_API bool \fBTestCollision\fP (const \fBBoundingSphere\fP &other) const"
.br
.ti -1c
.RI "TEMPEST_API \fBreal\fP \fBGetGrowth\fP (\fBBoundingSphere\fP &other) const"
.br
.ti -1c
.RI "\fBreal\fP \fBGetSize\fP (void) const"
.br
.RI "Returns the area of the Sphere\&. Untested\&. "
.ti -1c
.RI "void \fBMake2D\fP (bool state=true)"
.br
.ti -1c
.RI "void \fBSetCenter\fP (const \fBTM::Point\fP &pos)"
.br
.ti -1c
.RI "void \fBSetCenter\fP (\fBF32\fP x, \fBF32\fP y, \fBF32\fP z)"
.br
.ti -1c
.RI "const \fBTM::Point\fP & \fBGetCenter\fP (void) const"
.br
.RI "Get the location of the center\&. "
.ti -1c
.RI "void \fBSetRadius\fP (\fBreal\fP r)"
.br
.ti -1c
.RI "\fBreal\fP \fBGetRadius\fP (void) const"
.br
.RI "Returns the Radius of the Bounding Volume\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBTM::Point\fP \fB_center\fP"
.br
.RI "Center of the sphere\&. "
.ti -1c
.RI "\fBreal\fP \fB_radius\fP"
.br
.RI "Radius of the sphere\&. "
.in -1c
.SH "Detailed Description"
.PP 
The \fBBoundingSphere\fP is a basic bounding volume that can be used for simple, course collision tests\&. It is represented by a center position, located in the model space of the object it is attached to, and a radius, that describes its extent in all directions\&. TestCollision functions can be added for each type of boudning volume it can intersect with\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "BoundingSphere::BoundingSphere (const \fBTM::Point\fP & center, \fBreal\fP radius)"
Sets center and radius to args\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcenter\fP is the value for center\&. 
.br
\fIradius\fP is the value for radius\&. 
.RE
.PP

.SS "BoundingSphere::BoundingSphere (const \fBBoundingSphere\fP & one, const \fBBoundingSphere\fP & two)"
Special constructor that combines the volumes of 2 BoundingSpheres into one sphere that emcompasses both volumes\&. 
.PP
\fBParameters:\fP
.RS 4
\fIone\fP is the first sphere\&. 
.br
\fItwo\fP is the second sphere to combine with one\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "\fBreal\fP BoundingSphere::GetGrowth (\fBBoundingSphere\fP & other) const"
Returns how much a Sphere would grow if it were combined with another Sphere\&. This size is not specified in specific units, but rather more closely reflect the surface area of the new sphere, so should be used to compare relative sizes, not specific sizes, since this would be unpredictable and far too much work to be with it\&. This function should be as a heuristic for tests between spheres\&. 
.br
\fBParameters:\fP
.RS 4
\fIother\fP is the Sphere we are checking against\&. 
.RE
.PP

.SS "void TempestCollisions::BoundingSphere::SetCenter (const \fBTM::Point\fP & pos)\fC [inline]\fP"
Set new center\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP is the new location of the center\&. 
.RE
.PP

.SS "void TempestCollisions::BoundingSphere::SetCenter (\fBF32\fP x, \fBF32\fP y, \fBF32\fP z)\fC [inline]\fP"
Alternate setter for center\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP is the value for x\&. 
.br
\fIy\fP is the value for y\&. 
.br
\fIz\fP is the value for z\&. 
.RE
.PP

.SS "void TempestCollisions::BoundingSphere::SetRadius (\fBreal\fP r)\fC [inline]\fP"
Set the radius\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP is the new radius\&. 
.RE
.PP

.SS "bool BoundingSphere::TestCollision (const \fBBoundingSphere\fP & other) const"
Tests if another \fBBoundingSphere\fP is intersecting with this \fBBoundingSphere\fP\&. The distance between the centers is compared with the sum of the radii\&. We keep it squred to avoid having to call a sqrt function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP is the \fBBoundingSphere\fP we are testing against\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Tempest from the source code\&.
