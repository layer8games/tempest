.TH "TempestPhysics::SpringForce" 3 "Wed Jan 8 2020" "Tempest" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TempestPhysics::SpringForce
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SpringForce\&.h>\fP
.PP
Inherits \fBTempestPhysics::ForceGenerator\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "TEMPEST_API \fBSpringForce\fP (void)"
.br
.RI "Sets spring constant to 1, rest length to 1, everything else to default or false\&. "
.ti -1c
.RI "TEMPEST_API \fBSpringForce\fP (shared_ptr< \fBRigidBody2D\fP > otherEnd, \fBreal\fP springConstant, \fBreal\fP restLength)"
.br
.ti -1c
.RI "TEMPEST_API \fB~SpringForce\fP (void)"
.br
.RI "Not implemented\&. "
.ti -1c
.RI "TEMPEST_API void \fBv_UpdateForce\fP (shared_ptr< \fBRigidBody2D\fP > \fBRigidBody2D\fP) final"
.br
.ti -1c
.RI "TEMPEST_API void \fBv_UpdateForce\fP (shared_ptr< \fBRigidBody3D\fP > body) final"
.br
.ti -1c
.RI "void \fBMakeBungie\fP (bool state)"
.br
.ti -1c
.RI "void \fBSetOtherEnd\fP (shared_ptr< \fBRigidBody2D\fP > end)"
.br
.ti -1c
.RI "void \fBSetSpringConstant\fP (\fBreal\fP constant)"
.br
.ti -1c
.RI "void \fBSetRestLength\fP (\fBreal\fP length)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "shared_ptr< \fBRigidBody2D\fP > \fB_otherEnd\fP"
.br
.RI "Other end of the spring\&. Consider changing to a GameObject\&. "
.ti -1c
.RI "\fBreal\fP \fB_springConstant\fP"
.br
.RI "Determines the 'stiffness' of the spring\&. The higher this value is, the more force the spring can make\&. "
.ti -1c
.RI "\fBreal\fP \fB_restLength\fP"
.br
.RI "Length of the spring at rest\&. When an object reaches this length, a force will be acted on it\&. "
.ti -1c
.RI "bool \fB_isBungie\fP"
.br
.RI "Changes the state of the spring to use only pull forces, allowing the spring to 'scrunch' up\&. "
.in -1c
.SH "Detailed Description"
.PP 
A spring-like force that can be used with the Killer Engine\&. It uses Hooks law to generate the amount of force based on the distance that the spring is extended\&. The base equation is: f = -k * delta * l Where delta is the distance that the spring has been moved and k is what is known as the 'spring constant', a value that represents the 'stiffness' of the spring\&. For our terms, the equation will look like this: f = -k(l - l^0) Where l is the location of the end of the spring, and l^0 is the reseting position of the spring\&. Since this is a Vector4 force, the Vector4 version of the law looks like this: f = -l(|d| - l^0)^d Where |d| is the magnitude or length of d, which is distance away from l^0 our spring now is, and ^d is a unit Vector4 version of d\&. Also: d = xA - xB Where xA is the position of the spring attached to our object, and xB is the end of the spring\&. Usage: The force generator cannot be re-used\&. For each unique spring-like force we need to have its own Spring like force\&. Each spring-like force is created with a pointer to the object at the other end of the spring, the length of the spring, and the spring constant\&. This then must be registered with a ForceRegistry*\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SpringForce::SpringForce (shared_ptr< \fBRigidBody2D\fP > otherEnd, \fBreal\fP springConstant, \fBreal\fP restLength)"
Allows you to set up \fBSpringForce\fP in a single call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIotherEnd\fP is the far end of the spring\&. 
.br
\fIspringConstant\fP determines the 'stiffness' of the spring\&. 
.br
\fIrestLength\fP determines how long before the spring 'snaps' back\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void TempestPhysics::SpringForce::MakeBungie (bool state)\fC [inline]\fP"
Sets state to be bungie-like\&. This means that it will only produce pull forces\&. If the rest length is not at full, it will not product any force\&. 
.SS "void TempestPhysics::SpringForce::SetOtherEnd (shared_ptr< \fBRigidBody2D\fP > end)\fC [inline]\fP"
Changes the location of the other end of the spring\&. 
.PP
\fBParameters:\fP
.RS 4
\fIend\fP is the new opposite end of the spring\&. 
.RE
.PP

.SS "void TempestPhysics::SpringForce::SetRestLength (\fBreal\fP length)\fC [inline]\fP"
Changes the length of the invisible spring\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlength\fP is the new value for the rest length\&. 
.RE
.PP

.SS "void TempestPhysics::SpringForce::SetSpringConstant (\fBreal\fP constant)\fC [inline]\fP"
Changes the 'striffness' of the spring\&. 
.PP
\fBParameters:\fP
.RS 4
\fIconstant\fP is the new value for the spring constant\&. 
.RE
.PP

.SS "void SpringForce::v_UpdateForce (shared_ptr< \fBRigidBody2D\fP > RigidBody2D)\fC [final]\fP"
Calculate the length of the spring, then creates a force to pull the object towards the other end if it is far enough away\&. 
.PP
\fBParameters:\fP
.RS 4
\fI\fBRigidBody2D\fP\fP is the object that will be acted on by the spring\&. 
.RE
.PP

.SS "void SpringForce::v_UpdateForce (shared_ptr< \fBRigidBody3D\fP > body)\fC [final]\fP"
Calculate the length of the spring, then creates a force to pull the object towards the other end if it is far enough away\&. This has been implemented but not tested\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbody\fP is the object that will be acted on by the spring\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Tempest from the source code\&.
