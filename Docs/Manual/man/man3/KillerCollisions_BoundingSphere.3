.TH "KillerCollisions::BoundingSphere" 3 "Wed Feb 13 2019" "Killer Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KillerCollisions::BoundingSphere
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <BoundingSphere\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBoundingSphere\fP (void)"
.br
.ti -1c
.RI "\fBBoundingSphere\fP (const \fBKM::Vector\fP &center, \fBreal\fP radius)"
.br
.ti -1c
.RI "\fBBoundingSphere\fP (const \fBBoundingSphere\fP &one, const \fBBoundingSphere\fP &two)"
.br
.ti -1c
.RI "bool \fBTestCollision\fP (const \fBBoundingSphere\fP &other) const"
.br
.ti -1c
.RI "\fBreal\fP \fBGetGrowth\fP (\fBBoundingSphere\fP &other) const"
.br
.ti -1c
.RI "\fBreal\fP \fBGetSize\fP (void) const"
.br
.ti -1c
.RI "void \fBSetCenter\fP (const \fBKM::Vector\fP &pos)"
.br
.ti -1c
.RI "void \fBSetCenter\fP (\fBF32\fP x, \fBF32\fP y, \fBF32\fP z)"
.br
.ti -1c
.RI "const \fBKM::Vector\fP & \fBGetCenter\fP (void) const"
.br
.ti -1c
.RI "void \fBSetRadius\fP (\fBreal\fP r)"
.br
.ti -1c
.RI "\fBreal\fP \fBGetRadius\fP (void) const"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBKM::Vector\fP \fB_center\fP"
.br
.RI "Center of the sphere\&. "
.ti -1c
.RI "\fBreal\fP \fB_radius\fP"
.br
.RI "Radius of the sphere\&. "
.in -1c
.SH "Detailed Description"
.PP 
The \fBBoundingSphere\fP is a basic bounding volume that can be used for simple, course collision tests\&. It is represented by a center position, located in the model space of the object it is attached to, and a radius, that describes its extent in all directions\&.
.PP
TestCollision functions can be added for each type of boudning volume it can intersect with\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "BoundingSphere::BoundingSphere (void)"
Sets center and radius to 0\&. 
.SS "BoundingSphere::BoundingSphere (const \fBKM::Vector\fP & center, \fBreal\fP radius)"
Sets center and radius to args\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcenter\fP is the value for center\&. 
.br
\fIradius\fP is the value for radius\&. 
.RE
.PP

.SS "BoundingSphere::BoundingSphere (const \fBBoundingSphere\fP & one, const \fBBoundingSphere\fP & two)"
Special constructor that combines the volumes of 2 BoundingSpheres into one sphere that emcompasses both volumes\&. 
.PP
\fBParameters:\fP
.RS 4
\fIone\fP is the first sphere\&. 
.br
\fItwo\fP is the second sphere to combine with one\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "const \fBKM::Vector\fP& KillerCollisions::BoundingSphere::GetCenter (void) const\fC [inline]\fP"
Get the location of the center\&. 
.SS "\fBreal\fP BoundingSphere::GetGrowth (\fBBoundingSphere\fP & other) const"
Returns how much a Sphere would grow if it were combined with another Sphere\&. Untested\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP is the Sphere we are checking against\&. 
.RE
.PP

.SS "\fBreal\fP KillerCollisions::BoundingSphere::GetRadius (void) const\fC [inline]\fP"
Get radius\&. 
.SS "\fBreal\fP KillerCollisions::BoundingSphere::GetSize (void) const\fC [inline]\fP"
Returns the area of the Sphere\&. Untested\&. 
.SS "void KillerCollisions::BoundingSphere::SetCenter (const \fBKM::Vector\fP & pos)\fC [inline]\fP"
Set new center\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP is the new location of the center\&. 
.RE
.PP

.SS "void KillerCollisions::BoundingSphere::SetCenter (\fBF32\fP x, \fBF32\fP y, \fBF32\fP z)\fC [inline]\fP"
Alternate setter for center\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP is the value for x\&. 
.br
\fIy\fP is the value for y\&. 
.br
\fIz\fP is the value for z\&. 
.RE
.PP

.SS "void KillerCollisions::BoundingSphere::SetRadius (\fBreal\fP r)\fC [inline]\fP"
Set the radius\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP is the new radius\&. 
.RE
.PP

.SS "bool BoundingSphere::TestCollision (const \fBBoundingSphere\fP & other) const"
Tests if another \fBBoundingSphere\fP is intersecting with this \fBBoundingSphere\fP\&. The distance between the centers is compared with the sum of the radii\&. We keep it squred to avoid having to call a sqrt function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP is the \fBBoundingSphere\fP we are testing against\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Killer Engine from the source code\&.
