.TH "Tempest::StateMachine< GameObjectType >" 3 "Mon Mar 2 2020" "Tempest" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Tempest::StateMachine< GameObjectType >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <StateMachine\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBStateMachine\fP (GameObjectType *owner)"
.br
.RI "No major change\&. Sets all states to nullptr\&. "
.ti -1c
.RI "\fB~StateMachine\fP (void)"
.br
.RI "Not implemented\&. "
.ti -1c
.RI "void \fBUpdate\fP (void) const"
.br
.RI "Calls \fBState::v_Execute\fP on the global and current state\&. "
.ti -1c
.RI "void \fBChangeState\fP (\fBState\fP< GameObjectType > *newState)"
.br
.ti -1c
.RI "void \fBRevertState\fP (void)"
.br
.RI "The previous \fBState\fP is remembered\&. This changes back to that \fBState\fP, calling ChangeState so its logic gets used\&. "
.ti -1c
.RI "void \fBSetCurrentState\fP (\fBState\fP< GameObjectType > *state)"
.br
.ti -1c
.RI "\fBState\fP< GameObjectType > * \fBGetCurrentState\fP (void) const"
.br
.RI "Return an accessible pointer to the current state\&. "
.ti -1c
.RI "void \fBSetPreviousState\fP (\fBState\fP< GameObjectType > *state)"
.br
.ti -1c
.RI "\fBState\fP< GameObjectType > * \fBGetPreviousState\fP (void) const"
.br
.RI "Return the previous state pointer\&. "
.ti -1c
.RI "void \fBSetGlobalState\fP (\fBState\fP< GameObjectType > *state)"
.br
.ti -1c
.RI "\fBState\fP< GameObjectType > * \fBGetGlobalState\fP (void) const"
.br
.RI "Return the global state\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "GameObjectType * \fB_owner\fP"
.br
.ti -1c
.RI "\fBState\fP< GameObjectType > * \fB_currentState\fP"
.br
.RI "Pointer to the owner of the \fBStateMachine\fP\&. This allows \fBState\fP functions to be called on the owner\&. "
.ti -1c
.RI "\fBState\fP< GameObjectType > * \fB_previousState\fP"
.br
.RI "Pointer to the current state\&. "
.ti -1c
.RI "\fBState\fP< GameObjectType > * \fB_globalState\fP"
.br
.RI "Pointer to the previous state\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class GameObjectType>
.br
class Tempest::StateMachine< GameObjectType >"
This is a general purpose state Machine\&. It will facilitate the changes between states that have been added to it\&. States can control when they are switched, of they can be switched manually\&. This is created as a template, meaning that each class should have its own version of the \fBStateMachine\fP so that it can control its own States\&. 
.br
 
.SH "Member Function Documentation"
.PP 
.SS "template<class GameObjectType > void \fBTempest::StateMachine\fP< GameObjectType >::ChangeState (\fBState\fP< GameObjectType > * newState)\fC [inline]\fP"
Changes the \fBState\fP to the new state\&. Calls \fBState::v_Exit\fP and \fBState::v_Enter\fP as expected on the old and new \fBState\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fInewState\fP is the next state for the Machine\&. 
.br
 
.RE
.PP

.SS "template<class GameObjectType > void \fBTempest::StateMachine\fP< GameObjectType >::SetCurrentState (\fBState\fP< GameObjectType > * state)\fC [inline]\fP"
Set the current \fBState\fP bypassing the ChangeState logic\&. 
.PP
\fBParameters\fP
.RS 4
\fIstate\fP is the new current state\&. 
.br
 
.RE
.PP

.SS "template<class GameObjectType > void \fBTempest::StateMachine\fP< GameObjectType >::SetGlobalState (\fBState\fP< GameObjectType > * state)\fC [inline]\fP"
Set the global state, bypassing the ChangeState logic\&. 
.PP
\fBParameters\fP
.RS 4
\fIstate\fP 
.RE
.PP

.SS "template<class GameObjectType > void \fBTempest::StateMachine\fP< GameObjectType >::SetPreviousState (\fBState\fP< GameObjectType > * state)\fC [inline]\fP"
Set the previous state, by passing the ChangeState logic\&. 
.PP
\fBParameters\fP
.RS 4
\fIstate\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Tempest from the source code\&.
