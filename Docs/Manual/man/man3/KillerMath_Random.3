.TH "KillerMath::Random" 3 "Thu Mar 7 2019" "Killer Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KillerMath::Random
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Random\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRandom\fP (void)"
.br
.ti -1c
.RI "\fB~Random\fP (void)"
.br
.ti -1c
.RI "\fBS32\fP \fBRandomInt\fP (\fBS32\fP min, \fBS32\fP max)"
.br
.ti -1c
.RI "\fBS64\fP \fBRandomLong\fP (\fBS64\fP min, \fBS64\fP max)"
.br
.ti -1c
.RI "\fBF32\fP \fBRandomFloat\fP (\fBF32\fP min, \fBF32\fP max)"
.br
.ti -1c
.RI "\fBF64\fP \fBRandomDouble\fP (\fBF64\fP min, \fBF64\fP max)"
.br
.ti -1c
.RI "\fBVector4\fP \fBRandomVector4\fP (\fBF32\fP min, \fBF32\fP max, bool is2d=false)"
.br
.ti -1c
.RI "\fBQuaternion\fP \fBRandomQuaternion\fP (\fBF32\fP min, \fBF32\fP max)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static shared_ptr< \fBRandom\fP > \fBInstance\fP (void)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::mt19937 \fB_generator\fP"
.br
.RI "STL Mersenne twister engine instance\&. "
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static shared_ptr< \fBRandom\fP > \fB_instance\fP = nullptr"
.br
.RI "Pointer to self used for singleton\&. "
.in -1c
.SH "Detailed Description"
.PP 
\fBRandom\fP number generator\&. It is based on the c++11 STL random, using the mersene twist algorithm\&.
.PP
Has an optional singleton\&. Unlike most singletons in the engine, \fBRandom\fP is allowed to create other instances\&. The singleton is there for convience only 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Random::Random (void)"
Default constructor\&. Sets the _generator to the current time, to keep it random\&. 
.SS "Random::~Random (void)"
Default destructor\&. Doesn't have any function\&. 
.SH "Member Function Documentation"
.PP 
.SS "shared_ptr< \fBRandom\fP > Random::Instance (void)\fC [static]\fP"
Basic Singleton pattern\&. Allows access to global copy\&. Not required for use\&. 
.SS "\fBF64\fP Random::RandomDouble (\fBF64\fP min, \fBF64\fP max)"
Returns a 64 bit floating point between min and max 
.PP
\fBParameters:\fP
.RS 4
\fImin\fP is the floor value\&. 
.br
\fImax\fP is the ceiling value\&. 
.RE
.PP

.SS "\fBF32\fP Random::RandomFloat (\fBF32\fP min, \fBF32\fP max)"
Returns a random 32 bit floating point between min and max 
.PP
\fBParameters:\fP
.RS 4
\fImin\fP is the floor value\&. 
.br
\fImax\fP is the ceiling value\&. 
.RE
.PP

.SS "\fBS32\fP Random::RandomInt (\fBS32\fP min, \fBS32\fP max)"
Returns a 32 bit signed it between min and max\&. 
.PP
\fBParameters:\fP
.RS 4
\fImin\fP is the floor value\&. 
.br
\fImax\fP is the ceiling value\&. 
.RE
.PP

.SS "\fBS64\fP Random::RandomLong (\fBS64\fP min, \fBS64\fP max)"
Returns a 64 bit signed it between min and max\&. 
.PP
\fBParameters:\fP
.RS 4
\fImin\fP is the floor value\&. 
.br
\fImax\fP is the ceiling value\&. 
.RE
.PP

.SS "\fBQuaternion\fP Random::RandomQuaternion (\fBF32\fP min, \fBF32\fP max)"
Returns a \fBQuaternion\fP with w,x,y and z between min and max 
.PP
\fBParameters:\fP
.RS 4
\fImin\fP is the floor value\&. 
.br
\fImax\fP is the ceiling value\&. 
.RE
.PP

.SS "\fBVector4\fP Random::RandomVector4 (\fBF32\fP min, \fBF32\fP max, bool is2d = \fCfalse\fP)"
Returns a \fBVector4\fP with x, y and z (depending on flag) between min and max 
.PP
\fBParameters:\fP
.RS 4
\fImin\fP is the floor value\&. 
.br
\fImax\fP is the ceiling value\&. 
.br
\fIis2d\fP determins if the z value should be set\&. false by default, it will be set to 0 unless true\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Killer Engine from the source code\&.
