.TH "Tempest::Controller" 3 "Tue Jan 7 2020" "Tempest" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Tempest::Controller \- Two enums are defined\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Controller\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "TEMPEST_API \fB~Controller\fP (void)"
.br
.RI "Destructor\&. No special functions within it\&. "
.ti -1c
.RI "TEMPEST_API void \fBUpdate\fP (void)"
.br
.RI "Sets the new state of each key\&. "
.ti -1c
.RI "TEMPEST_API void \fBKeyDown\fP (Keys k)"
.br
.ti -1c
.RI "TEMPEST_API void \fBKeyUp\fP (Keys k)"
.br
.ti -1c
.RI "TEMPEST_API const \fBTM::Point\fP \fBGetMouseCoord\fP (void)"
.br
.RI "Returns the raw mouse coordinates from the \fBGameWindow\fP\&. This is with the origin in the top left corner of the screen\&. "
.ti -1c
.RI "TEMPEST_API const \fBTM::Point\fP \fBGetMouseCoordInScreen\fP (void)"
.br
.RI "Returns the mouse coordinates in screen space, with the origin in the center of the screen\&. Wrapper around \fBGameWindow\fP\&. "
.ti -1c
.RI "const \fBTM::Point\fP \fBGetLeftMouseCoord\fP (void) const"
.br
.RI "Returns the raw coordinates of a Left Click in screen space\&. "
.ti -1c
.RI "const \fBTM::Point\fP \fBGetRightMouseCoord\fP (void) const"
.br
.RI "Returns the raw coordinates of a Right click in screen space\&. "
.ti -1c
.RI "TEMPEST_API bool \fBGetKeyDown\fP (Keys k)"
.br
.ti -1c
.RI "TEMPEST_API bool \fBGetKeyHeld\fP (Keys k)"
.br
.ti -1c
.RI "TEMPEST_API bool \fBGetKeyUp\fP (Keys k)"
.br
.ti -1c
.RI "TEMPEST_API bool \fBGetKeyReleased\fP (Keys k)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static TEMPEST_API shared_ptr< \fBController\fP > \fBInstance\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "KeyStates \fB_keyStates\fP [TOTAL_KEYS]"
.br
.RI "Array of states for each key, indexed by ID\&. "
.ti -1c
.RI "bool \fB_pastActiveKeys\fP [TOTAL_KEYS]"
.br
.RI "Array of keys in a pressed state as of last frame, indexed by ID\&. "
.ti -1c
.RI "bool \fB_curActiveKeys\fP [TOTAL_KEYS]"
.br
.RI "Array of keys in a pressed state as of this frame, indexed by ID\&. "
.ti -1c
.RI "\fBTM::Point\fP \fB_leftClickCoordinates\fP"
.br
.RI "Coordinates of last left click\&. Unused\&. "
.ti -1c
.RI "\fBTM::Point\fP \fB_rightClickCoordinates\fP"
.br
.RI "Coordinates of last right click\&. Unused\&. "
.ti -1c
.RI "\fBTM::Point\fP \fB_leftClickCoordInScreen\fP"
.br
.RI "Cached value of last left click in screen space\&. Unused\&. "
.ti -1c
.RI "\fBTM::Point\fP \fB_rightClickCoordInScreen\fP"
.br
.RI "Cached value of last right click in screen space\&. Unused\&. "
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static shared_ptr< \fBController\fP > \fB_instance\fP = NULL"
.br
.RI "Singleton Global instance\&. "
.in -1c
.SH "Detailed Description"
.PP 
Two enums are defined\&. 

Human input device controller\&. Abstract Keyboard input is received through a system all found in the *Program class\&. For example, in \fBGameWindow\fP, when windows gets a key input message for a key down even, \fBKeyDown(Keys k)\fP is called\&.KeyStates represents all the possible states that a key can have\&. KEY_RELEASED means that the key is not pressed\&. KEY_UP means that the key was released this frame\&. Keys represents all the supported keys\&. Update handles the logic of changing they key states, with two KeyState arrays holding the current key states, that is the key states of this frame and the past key states, that is the key states from last frame\&. 
.SH "Member Function Documentation"
.PP 
.SS "bool Controller::GetKeyDown (Keys k)"
Returns true if k has been pressed down this frame\&. 
.PP
\fBParameters:\fP
.RS 4
\fIk\fP Keys: Desired keycode\&. 
.RE
.PP

.SS "bool Controller::GetKeyHeld (Keys k)"
Returns true if k has been held down longer than 1 frame\&. 
.PP
\fBParameters:\fP
.RS 4
\fIk\fP Keys: Desired keycode 
.RE
.PP

.SS "bool Controller::GetKeyReleased (Keys k)"
Returns true if k is not being pressed during this frame 
.PP
\fBParameters:\fP
.RS 4
\fIk\fP Keys: Desired keycode 
.RE
.PP

.SS "bool Controller::GetKeyUp (Keys k)"
Returns true if k has been released this frame\&.  k Keys: Desired keycode 
.SS "void Controller::KeyDown (Keys k)"
Used by \fBGameWindow\fP to set when a key is pressed down, based on system signals\&. 
.PP
\fBParameters:\fP
.RS 4
\fIk\fP Keys: Keycode for key that has been pressed down\&. 
.RE
.PP

.SS "void Controller::KeyUp (Keys k)"
Used by \fBGameWindow\fP to set when a key is no longer detected to be held down\&. 
.PP
\fBParameters:\fP
.RS 4
\fIk\fP Keys: Keycode for key that has been released\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Tempest from the source code\&.
