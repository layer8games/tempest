.TH "Tempest::Camera" 3 "Wed Jan 8 2020" "Tempest" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Tempest::Camera
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Camera\&.h>\fP
.PP
Inherited by \fBTempest::FPSCamera\fP, and \fBTempest::OrbitCamera\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "TEMPEST_API \fBCamera\fP (void)"
.br
.RI "No implementation\&. "
.ti -1c
.RI "virtual TEMPEST_API \fB~Camera\fP (void)"
.br
.RI "No implementation\&. "
.ti -1c
.RI "virtual void \fBv_Rotate\fP (void)"
.br
.RI "No implemenations\&. This is meant to overloaded\&. "
.ti -1c
.RI "virtual void \fBv_Update\fP (void)"
.br
.RI "No implemenations\&. This is meant to overloaded\&. "
.ti -1c
.RI "virtual void \fBv_Move\fP (const \fBTM::Vector4\fP &offset)"
.br
.RI "No implemenations\&. This is meant to overloaded\&. "
.ti -1c
.RI "TEMPEST_API void \fBSetOrthographic\fP (void)"
.br
.ti -1c
.RI "TEMPEST_API void \fBSetOrthographic\fP (\fBF32\fP left, \fBF32\fP right, \fBF32\fP bottom, \fBF32\fP top, \fBF32\fP nearPlane, \fBF32\fP farPlane)"
.br
.ti -1c
.RI "TEMPEST_API void \fBSetPerspective\fP (void)"
.br
.ti -1c
.RI "TEMPEST_API void \fBSetPerspective\fP (\fBF32\fP fov, \fBF32\fP aspect, \fBF32\fP nearPlane, \fBF32\fP farPlane)"
.br
.ti -1c
.RI "TEMPEST_API void \fBSetDefaultMatrix4\fP (void)"
.br
.ti -1c
.RI "virtual const \fBTM::Matrix4\fP \fBGetViewMatrix4\fP (void)"
.br
.RI "Returns a Matrix4 that can be used to transform that can be used as a view matrix for the camera\&. For use in a \fBShader\fP for instance\&. "
.ti -1c
.RI "const \fBTM::Matrix4\fP & \fBGetProjectionMatrix4\fP (void)"
.br
.RI "This should not be used right now\&. In theory, it returns an internally cached projection matrix for rendering\&. "
.ti -1c
.RI "void \fBSetColor\fP (const \fBColor\fP &col)"
.br
.ti -1c
.RI "const \fBColor\fP & \fBGetBackgroundColor\fP (void) const"
.br
.RI "Returns the current background color\&. Not currently in use\&. "
.ti -1c
.RI "void \fBSetPosition\fP (\fBF32\fP x, \fBF32\fP y)"
.br
.ti -1c
.RI "void \fBSetPosition\fP (\fBF32\fP x, \fBF32\fP y, \fBF32\fP z)"
.br
.ti -1c
.RI "void \fBSetPosition\fP (const \fBTM::Point\fP &point)"
.br
.ti -1c
.RI "void \fBScalePosition\fP (\fBF32\fP x, \fBF32\fP y, \fBF32\fP scale)"
.br
.ti -1c
.RI "void \fBScalePosition\fP (\fBF32\fP x, \fBF32\fP y, \fBF32\fP z, \fBF32\fP scale)"
.br
.ti -1c
.RI "void \fBScalePosition\fP (const \fBTM::Point\fP &point, \fBF32\fP scale)"
.br
.ti -1c
.RI "const \fBTM::Point\fP & \fBGetPosition\fP (void) const"
.br
.RI "Return the current position of the \fBCamera\fP in world space\&. "
.ti -1c
.RI "void \fBSetTarget\fP (const \fBTM::Point\fP &target)"
.br
.ti -1c
.RI "void \fBSetTarget\fP (\fBF32\fP xVal, \fBF32\fP yVal)"
.br
.ti -1c
.RI "void \fBSetTarget\fP (\fBF32\fP xVal, \fBF32\fP yVal, \fBF32\fP zVal)"
.br
.ti -1c
.RI "const \fBTM::Point\fP & \fBGetTarget\fP (void)"
.br
.RI "Return the current target point in world space\&. "
.ti -1c
.RI "void \fBSetUpVector\fP (\fBF32\fP val)"
.br
.ti -1c
.RI "void \fBSetUpVector\fP (\fBF32\fP xVal, \fBF32\fP yVal, \fBF32\fP zVal)"
.br
.ti -1c
.RI "void \fBSetUpVector\fP (const \fBTM::Vector4\fP &vec)"
.br
.ti -1c
.RI "const \fBTM::Vector4\fP & \fBGetUpVector\fP (void) const"
.br
.RI "Return the current value of the Up Vector\&. "
.ti -1c
.RI "void \fBSetLookVector\fP (\fBF32\fP val)"
.br
.ti -1c
.RI "void \fBSetLookVector\fP (\fBF32\fP xVal, \fBF32\fP yVal)"
.br
.ti -1c
.RI "void \fBSetLookVector\fP (\fBF32\fP xVal, \fBF32\fP yVal, \fBF32\fP zVal)"
.br
.ti -1c
.RI "void \fBSetLookVector\fP (const \fBTM::Vector4\fP &vec)"
.br
.ti -1c
.RI "const \fBTM::Vector4\fP & \fBGetLookVector\fP (void) const"
.br
.RI "Return the current value of Look\&. "
.ti -1c
.RI "void \fBSetRightVector\fP (\fBF32\fP val)"
.br
.ti -1c
.RI "void \fBSetRightVector\fP (\fBF32\fP xVal, \fBF32\fP yVal)"
.br
.ti -1c
.RI "void \fBSetRightVector\fP (\fBF32\fP xVal, \fBF32\fP yVal, \fBF32\fP zVal)"
.br
.ti -1c
.RI "void \fBSetRightVector\fP (const \fBTM::Vector4\fP &vec)"
.br
.ti -1c
.RI "const \fBTM::Vector4\fP & \fBGetRightVector\fP (void) const"
.br
.RI "Return the current direction of the Right Vector\&. "
.ti -1c
.RI "void \fBSetMouseSensitivity\fP (\fBF32\fP val)"
.br
.ti -1c
.RI "\fBF32\fP \fBGetMouseSensitivity\fP (void)"
.br
.RI "Return the current value of Mouse Sensitivity\&. "
.ti -1c
.RI "\fBF32\fP \fBGetYaw\fP (void) const"
.br
.RI "Return the current value of Yaw\&. "
.ti -1c
.RI "\fBF32\fP \fBGetPitch\fP (void) const"
.br
.RI "Return the current value of Pitch\&. "
.ti -1c
.RI "void \fBSetFOV\fP (\fBF32\fP val)"
.br
.ti -1c
.RI "\fBF32\fP \fBGetFOV\fP (void) const"
.br
.RI "Return the current value of Field of View\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBTM::Point\fP \fB_position\fP"
.br
.RI "Position of \fBCamera\fP in world space\&. "
.ti -1c
.RI "\fBTM::Point\fP \fB_target\fP"
.br
.RI "Position the \fBCamera\fP should be aware of\&. Can be used for many purposes\&. "
.ti -1c
.RI "\fBTM::Vector4\fP \fB_up\fP"
.br
.RI "Direction, in world space, of up for the \fBCamera\fP\&. "
.ti -1c
.RI "\fBTM::Vector4\fP \fB_look\fP"
.br
.RI "Direction, in world space, that the Camear should point, or 'look' at\&. "
.ti -1c
.RI "\fBTM::Vector4\fP \fB_right\fP"
.br
.RI "Direction, in world space, that is perpendicular, to the right\&. "
.ti -1c
.RI "\fBTM::Point\fP \fB_currentMouseCoords\fP"
.br
.RI "Current position of the mouse cursor in screen space\&. Not currently used\&. "
.ti -1c
.RI "\fBTM::Point\fP \fB_lastMouseCoords\fP"
.br
.RI "Last known position of the mouse cursor in screen space\&. Not currently used\&. "
.ti -1c
.RI "\fBF32\fP \fB_mouseSensitivity\fP"
.br
.RI "Scaling factor used to make the mouse movments more drastice or pronounced\&. Not used in the default \fBCamera\fP\&. "
.ti -1c
.RI "\fBF32\fP \fB_yaw\fP"
.br
.RI "Yaw, or y orientation value\&. "
.ti -1c
.RI "\fBF32\fP \fB_pitch\fP"
.br
.RI "Pitch, or x orientation value\&. "
.ti -1c
.RI "\fBF32\fP \fB_deltaYaw\fP"
.br
.RI "The difference between the current and last yaw\&. "
.ti -1c
.RI "\fBF32\fP \fB_deltaPitch\fP"
.br
.RI "The difference between the current and last pitch\&. "
.ti -1c
.RI "\fBF32\fP \fB_fov\fP"
.br
.RI "Field of View for the camera\&. Affects the projection, specifically, when perspective is used how far away objects are skewed and what is culled\&. "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fB_v_UpdateCameraVectors\fP (void)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBColor\fP \fB_background\fP"
.br
.RI "Background color of current level\&. Not in use yet\&. "
.ti -1c
.RI "\fBTM::Matrix4\fP \fB_projection\fP"
.br
.RI "Projection Matrix4 (Orthographic or Perspective)\&. Not used\&. "
.in -1c
.SH "Detailed Description"
.PP 
Default \fBCamera\fP for the \fBEngine\fP\&. This \fBCamera\fP is fully operational\&. It controls the offset of the view port from the origin\&. When the position of the \fBCamera\fP is set, every other \fBGameObject\fP that is rendered is moved the negative of the position\&. If this \fBCamera\fP doesn't do what you need it to do, it is meant to be extended, with functions that are virtual\&. 
.SH "Member Function Documentation"
.PP 
.SS "virtual void Tempest::Camera::_v_UpdateCameraVectors (void)\fC [inline]\fP, \fC [private]\fP, \fC [virtual]\fP"
Updates the internal vectors of the \fBCamera\fP based on changes or input\&. For instance, if Right changes, then Up may have to adjust to match it\&. TODO:: This should maybe be moved to Protected\&. Currently there is no implementation\&. 
.PP
Reimplemented in \fBTempest::OrbitCamera\fP\&.
.SS "void Tempest::Camera::ScalePosition (\fBF32\fP x, \fBF32\fP y, \fBF32\fP scale)\fC [inline]\fP"
Set the position of the \fBCamera\fP in world space scaled by a value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP is the new position along the x axis\&. 
.br
\fIy\fP is the new position along the y axis\&. 
.br
\fIscale\fP is the value to scale the positions by 
.RE
.PP

.SS "void Tempest::Camera::ScalePosition (\fBF32\fP x, \fBF32\fP y, \fBF32\fP z, \fBF32\fP scale)\fC [inline]\fP"
Set the position of the \fBCamera\fP in world space scaled by a value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP is the new position along the x axis\&. 
.br
\fIy\fP is the new position along the y axis\&. 
.br
\fIz\fP is the new position along the z axis\&. 
.br
\fIscale\fP is the value to scale the positions by 
.RE
.PP

.SS "void Tempest::Camera::ScalePosition (const \fBTM::Point\fP & point, \fBF32\fP scale)\fC [inline]\fP"
Set the position of the \fBCamera\fP in world space scaled by a value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP is the new position\&. 
.br
\fIscale\fP is the value to scale the positions by 
.RE
.PP

.SS "void Tempest::Camera::SetColor (const \fBColor\fP & col)\fC [inline]\fP"
Sets the background color of the view\&. This is untested and may be duplicated data from the \fBGameWindow\fP\&. This is not in use yet, but should be when Tempest#44 is implemented\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcol\fP is the new color to set\&. 
.RE
.PP

.SS "void Camera::SetDefaultMatrix4 (void)"
Helper function to set the projection Matrix4 to be an identity Matrix4\&. 
.PP
\fBParameters:\fP
.RS 4
\fInone\fP 
.RE
.PP

.SS "void Tempest::Camera::SetFOV (\fBF32\fP val)\fC [inline]\fP"
Set the Field of View for the \fBCamera\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIval\fP is the new value\&. 70 to 90 is a good range\&. 
.RE
.PP

.SS "void Tempest::Camera::SetLookVector (\fBF32\fP val)\fC [inline]\fP"
Set the direction of the Look vector\&. 
.PP
\fBParameters:\fP
.RS 4
\fIval\fP is used to set all param of Look\&. 
.RE
.PP

.SS "void Tempest::Camera::SetLookVector (\fBF32\fP xVal, \fBF32\fP yVal)\fC [inline]\fP"
Set the direction of the Look vector\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxVal\fP is the x direction of Up\&. 
.br
\fIyVal\fP is the y direction of Up\&. 
.RE
.PP

.SS "void Tempest::Camera::SetLookVector (\fBF32\fP xVal, \fBF32\fP yVal, \fBF32\fP zVal)\fC [inline]\fP"
Set the direction of the Look vector\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxVal\fP is the x direction of Up\&. 
.br
\fIyVal\fP is the y direction of Up\&. 
.br
\fIzVal\fP is the z direction of Up\&. 
.RE
.PP

.SS "void Tempest::Camera::SetLookVector (const \fBTM::Vector4\fP & vec)\fC [inline]\fP"
Set the direction of the Look vector\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvec\fP is the new value for Look\&. 
.RE
.PP

.SS "void Tempest::Camera::SetMouseSensitivity (\fBF32\fP val)\fC [inline]\fP"
Set how sensitive the mouse should be\&. This is a scaling value used on raw input\&. 
.PP
\fBParameters:\fP
.RS 4
\fIval\fP is the new sensitivity\&. 
.RE
.PP

.SS "void Camera::SetOrthographic (void)"
Sets private Matrix4 to use an orthogrphic projection\&. This calls the \fBGameWindow\fP to get the demensions for the Matrix4\&. 
.PP
\fBParameters:\fP
.RS 4
\fInone\fP 
.RE
.PP

.SS "void Camera::SetOrthographic (\fBF32\fP left, \fBF32\fP right, \fBF32\fP bottom, \fBF32\fP top, \fBF32\fP nearPlane, \fBF32\fP farPlane)"
Sets private Matrix4 to use an orthogrphic projection\&. The params should be sent in game units\&. For instance, the default version of this function calls the \fBGameWindow\fP dimensions to size the projection size\&. 
.PP
\fBParameters:\fP
.RS 4
\fIleft\fP is the left border of the view port\&. 
.br
\fIright\fP is the right border of the view port\&. 
.br
\fIbottom\fP is the lower border of the view port 
.br
\fItop\fP is the uppoer border of the view port\&. 
.br
\fInearPlane\fP is the close (next to the view) border of the view port\&. 
.br
\fIfarPlane\fP is the distance border of the view port, ie\&. the max view distance\&. 
.RE
.PP

.SS "void Camera::SetPerspective (void)"
Sets the private Matrix4 to use a perspective projection\&. Values are hard coded for now\&. 
.PP
\fBParameters:\fP
.RS 4
\fInone\fP 
.RE
.PP

.SS "void Camera::SetPerspective (\fBF32\fP fov, \fBF32\fP aspect, \fBF32\fP nearPlane, \fBF32\fP farPlane)"
Sets the private Matrix4 to use a perspective projection\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfov\fP is the field of view for the view port\&. 70 to 90 is a good range for this\&. 
.br
\fIaspect\fP is the aspect ratio of the view port\&. This can be found by dividing the width by the hieght of the window\&. 
.br
\fIfarPlane\fP is the distance border of the view port, ie\&. the max view distance\&. 
.RE
.PP

.SS "void Tempest::Camera::SetPosition (\fBF32\fP x, \fBF32\fP y)\fC [inline]\fP"
Set the position of the \fBCamera\fP along the x and y axis in the world space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP is the new position along the x axis\&. 
.br
\fIy\fP is the new position along the y axis\&. 
.RE
.PP

.SS "void Tempest::Camera::SetPosition (\fBF32\fP x, \fBF32\fP y, \fBF32\fP z)\fC [inline]\fP"
Set the position of the \fBCamera\fP along the x, y and z axis in world space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP is the new position along the x axis\&. 
.br
\fIy\fP is the new position along the y axis\&. 
.br
\fIz\fP is the new position along the z axis\&. 
.RE
.PP

.SS "void Tempest::Camera::SetPosition (const \fBTM::Point\fP & point)\fC [inline]\fP"
Set the position of the \fBCamera\fP to a Point in world space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP is the new position\&. 
.RE
.PP

.SS "void Tempest::Camera::SetRightVector (\fBF32\fP val)\fC [inline]\fP"
Set the value of the Right vector\&. 
.PP
\fBParameters:\fP
.RS 4
\fIval\fP is used to set all values of Right 
.RE
.PP

.SS "void Tempest::Camera::SetRightVector (\fBF32\fP xVal, \fBF32\fP yVal)\fC [inline]\fP"
Set the value of the Right vector\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxVal\fP is the x direction of Right\&. 
.br
\fIyVal\fP is the y direction of Right\&. 
.RE
.PP

.SS "void Tempest::Camera::SetRightVector (\fBF32\fP xVal, \fBF32\fP yVal, \fBF32\fP zVal)\fC [inline]\fP"
Set the value of the Right vector\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxVal\fP is the x direction of Right\&. 
.br
\fIyVal\fP is the y direction of Right\&. 
.br
\fIzVal\fP is the z direction of Right\&. 
.RE
.PP

.SS "void Tempest::Camera::SetRightVector (const \fBTM::Vector4\fP & vec)\fC [inline]\fP"
Set the value of the Right vector\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvec\fP is the new direction of Right\&. 
.RE
.PP

.SS "void Tempest::Camera::SetTarget (const \fBTM::Point\fP & target)\fC [inline]\fP"
Set a pointer to a target Point in world space\&. This can be used for many different things\&. Point is set and stored by value, not ref or pointer\&. 
.SS "void Tempest::Camera::SetTarget (\fBF32\fP xVal, \fBF32\fP yVal)\fC [inline]\fP"
Set the position in world space of the target manually\&. Z is set to 0\&.0f automatically\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxVal\fP is the new position along the x axis\&. 
.br
\fIyVal\fP is the new position along the y axis\&. 
.RE
.PP

.SS "void Tempest::Camera::SetTarget (\fBF32\fP xVal, \fBF32\fP yVal, \fBF32\fP zVal)\fC [inline]\fP"
Set the position in world space of the target manually\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxVal\fP is the new position along the x axis\&. 
.br
\fIyVal\fP is the new position along the y axis\&. 
.br
\fIzVal\fP is the new position along the z axis\&. 
.RE
.PP

.SS "void Tempest::Camera::SetUpVector (\fBF32\fP val)\fC [inline]\fP"
Set the direction of Up in world space for the \fBCamera\fP\&. This is not tested in a way that defines up other than 1\&.0f\&. 
.PP
\fBParameters:\fP
.RS 4
\fIval\fP is the new direction of just y in the up vector\&. 
.RE
.PP

.SS "void Tempest::Camera::SetUpVector (\fBF32\fP xVal, \fBF32\fP yVal, \fBF32\fP zVal)\fC [inline]\fP"
Set the direction of Up in world space for the \fBCamera\fP\&. This is not tested in a way that defines up other than 1\&.0f\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxVal\fP is the x direction of Up\&. 
.br
\fIyVal\fP is the y direction of Up\&. 
.br
\fIzVal\fP is the z direction of Up\&. 
.RE
.PP

.SS "void Tempest::Camera::SetUpVector (const \fBTM::Vector4\fP & vec)\fC [inline]\fP"
Set the direction of Up in world space for the \fBCamera\fP\&. This is not tested in a way that defines up other than 1\&.0f\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvec\fP is the full direction of Up in vector form\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Tempest from the source code\&.
