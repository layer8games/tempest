.TH "KillerEngine::Text" 3 "Mon Feb 25 2019" "Killer Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KillerEngine::Text
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Text\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBText\fP (void)"
.br
.ti -1c
.RI "\fB~Text\fP (void)"
.br
.ti -1c
.RI "void \fBSetPosition\fP (const \fBKM::Vector4\fP &pos)"
.br
.ti -1c
.RI "void \fBSetPosition\fP (\fBF32\fP x, \fBF32\fP y)"
.br
.ti -1c
.RI "void \fBAddText\fP (string text)"
.br
.ti -1c
.RI "void \fBSetTextColor\fP (const \fBColor\fP &col)"
.br
.ti -1c
.RI "void \fBSetUniforms\fP (string name, const \fBKM::Matrix4\fP &Matrix4)"
.br
.ti -1c
.RI "string \fBGetText\fP (void)"
.br
.ti -1c
.RI "void \fBSetActive\fP (bool state)"
.br
.ti -1c
.RI "void \fBSetActive\fP (void)"
.br
.ti -1c
.RI "void \fBSetInactive\fP (void)"
.br
.ti -1c
.RI "bool \fBGetActive\fP (void) const"
.br
.ti -1c
.RI "\fBF32\fP \fBGetWidth\fP (void)"
.br
.ti -1c
.RI "void \fBSetFont\fP (shared_ptr< \fBFont\fP > font)"
.br
.ti -1c
.RI "void \fBSetFont\fP (\fBFont\fP &font)"
.br
.ti -1c
.RI "const shared_ptr< \fBFont\fP > \fBGetFont\fP (void)"
.br
.ti -1c
.RI "std::vector< shared_ptr< \fBGlyph\fP > > \fBGetCharacterList\fP (void) const"
.br
.ti -1c
.RI "void \fBSetScale\fP (const \fBKM::Vector4\fP &s)"
.br
.ti -1c
.RI "void \fBSetScale\fP (\fBF32\fP xScale, \fBF32\fP yScale)"
.br
.ti -1c
.RI "const \fBKM::Vector4\fP & \fBGetScale\fP (void)"
.br
.ti -1c
.RI "void \fBSetColor\fP (const \fBColor\fP &c)"
.br
.ti -1c
.RI "void \fBSetColor\fP (\fBF32\fP r, \fBF32\fP g, \fBF32\fP b)"
.br
.ti -1c
.RI "const \fBColor\fP & \fBGetColor\fP (void)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fB_UpdatePositions\fP (void)"
.br
.ti -1c
.RI "void \fB_UpdateActive\fP (void)"
.br
.ti -1c
.RI "void \fB_UpdateScales\fP (void)"
.br
.ti -1c
.RI "void \fB_UpdateColors\fP (void)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "bool \fB_active\fP"
.br
.RI "Active state of \fBText\fP and each \fBGlyph\fP\&. "
.ti -1c
.RI "\fBF32\fP \fB_totalWidth\fP"
.br
.RI "Total space the \fBText\fP will take up on screen\&. "
.ti -1c
.RI "\fBKM::Vector4\fP \fB_pos\fP"
.br
.RI "Position of the first \fBGlyph\fP in the \fBText\fP\&. "
.ti -1c
.RI "string \fB_text\fP"
.br
.RI "The string used to generate each \fBGlyph\fP\&. "
.ti -1c
.RI "shared_ptr< \fBFont\fP > \fB_font\fP"
.br
.RI "The \fBFont\fP used to generate each \fBGlyph\fP\&. "
.ti -1c
.RI "std::vector< shared_ptr< \fBGlyph\fP > > \fB_characterList\fP"
.br
.RI "List of all generated Glyphs\&. "
.ti -1c
.RI "\fBKM::Vector4\fP \fB_scale\fP"
.br
.RI "The scaling factor used for each \fBGlyph\fP\&. "
.ti -1c
.RI "\fBColor\fP \fB_color\fP"
.br
.RI "The \fBColor\fP used for each \fBGlyph\fP\&. "
.in -1c
.SH "Detailed Description"
.PP 
This class will hold all the data for a string of text that will be drawn to the screen\&. It will use the font class and the texture manager to keep track of all the character data and the texture for the font\&.
.PP
There are a lot of things that can be done to optimize this class and these ideas\&. It probably needs a second pass very badly\&. For example, \fBAddText()\fP creates as many \fBGlyph\fP characters as there are characters in the string that is passed in\&. This means that there is no shared re-use of the \fBGlyph\fP\&. This is because each one needs a unique position\&. There could be some clever wasy to get around this using instancing, but this will require more work, and I wanted to just get the class working\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Text::Text (void)"
Default constructor\&. Sets scale and color to 1\&.0f, everything else to 0 or null\&. 
.SS "Text::~Text (void)"
Default destructor\&. No function\&. 
.SH "Member Function Documentation"
.PP 
.SS "void Text::_UpdateActive (void)\fC [private]\fP"
Iterates over each \fBGlyph\fP calling GameObject::SetActive() for each, using _active\&. 
.SS "void Text::_UpdateColors (void)\fC [private]\fP"
Iterates over each \fBGlyph\fP calling GameObject::SetColor() for each, using _color\&. 
.SS "void Text::_UpdatePositions (void)\fC [private]\fP"
Iterates over each \fBGlyph\fP calling GameObject::SetPosition() for each \fBGlyph\fP, updating the position, including the xAdvnace\&. 
.SS "void Text::_UpdateScales (void)\fC [private]\fP"
Iterates over each \fBGlyph\fP calling GameObject::SetScale() for each, using _scale\&. 
.SS "void Text::AddText (string text)"
This does not so much add additional text to the \fBText\fP as set's what string of Glpyhs will be set\&. This does incure the cost of creating all of the \fBGlyph\fP characters in the \fBText\fP\&. This creates a unique \fBGlyph\fP for each character in the \fBText\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fItext\fP is the string that will be turned into Glyphs\&. 
.RE
.PP

.SS "bool KillerEngine::Text::GetActive (void) const\fC [inline]\fP"
Returns the active state of the \fBText\fP, and by inference, each \fBGlyph\fP\&. 
.SS "std::vector<shared_ptr<\fBGlyph\fP> > KillerEngine::Text::GetCharacterList (void) const\fC [inline]\fP"
Returns all the Glyphs in the \fBText\fP\&. Used for copying\&. 
.SS "const \fBColor\fP& KillerEngine::Text::GetColor (void)\fC [inline]\fP"
Returns the current \fBColor\fP of the \fBText\fP\&. 
.SS "const shared_ptr<\fBFont\fP> KillerEngine::Text::GetFont (void)\fC [inline]\fP"
Returns the font \fBText\fP is using\&. 
.SS "const \fBKM::Vector4\fP& KillerEngine::Text::GetScale (void)\fC [inline]\fP"
Returns the current scale of the \fBText\fP\&. 
.SS "string KillerEngine::Text::GetText (void)\fC [inline]\fP"
Returns a string version of the current text represented by Glyphs (if the Glyphs have been generated with a font)\&. 
.SS "\fBF32\fP KillerEngine::Text::GetWidth (void)\fC [inline]\fP"
Returns the total width of all the Glyphs including the xAdvance values\&. This means that this width represents how much screen space the \fBText\fP is going to take up on the x axis\&. 
.SS "void KillerEngine::Text::SetActive (bool state)\fC [inline]\fP"
Sets the active state of each \fBGlyph\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP is the new state each \fBGlyph\fP will get\&. 
.RE
.PP

.SS "void KillerEngine::Text::SetActive (void)\fC [inline]\fP"
Sets each \fBGlyph\fP to active state\&. 
.SS "void KillerEngine::Text::SetColor (const \fBColor\fP & c)\fC [inline]\fP"
Sets the \fBColor\fP for the \fBText\fP and each \fBGlyph\fP that has been added\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP is the \fBColor\fP that will be used\&. 
.RE
.PP

.SS "void KillerEngine::Text::SetColor (\fBF32\fP r, \fBF32\fP g, \fBF32\fP b)\fC [inline]\fP"
Sets the \fBColor\fP for the \fBText\fP and each \fBGlyph\fP that has been added\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP is the Red value that will be used\&. 
.br
\fIg\fP is the Green value that will be used\&. 
.br
\fIb\fP is the Blue value that will be used\&. 
.RE
.PP

.SS "void KillerEngine::Text::SetFont (shared_ptr< \fBFont\fP > font)\fC [inline]\fP"
Sets the font for the \fBText\fP and all of the Glyphs, if there are any\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfont\fP is the new \fBFont\fP that will be saved in this \fBText\fP\&. 
.RE
.PP

.SS "void KillerEngine::Text::SetFont (\fBFont\fP & font)\fC [inline]\fP"
Sets the font for the \fBText\fP and all of the Glyphs, if there are any\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfont\fP is the new \fBFont\fP that will be saved in this \fBText\fP\&. 
.RE
.PP

.SS "void KillerEngine::Text::SetInactive (void)\fC [inline]\fP"
Sets each \fBGlyph\fP to not active state\&. 
.SS "void KillerEngine::Text::SetPosition (const \fBKM::Vector4\fP & pos)\fC [inline]\fP"
Updates the position of each \fBGlyph\fP in the \fBText\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP is the new position that will be used to start the update of each \fBGlyph\fP\&. 
.RE
.PP

.SS "void KillerEngine::Text::SetPosition (\fBF32\fP x, \fBF32\fP y)\fC [inline]\fP"
Updates the position of each \fBGlyph\fP in the \fBText\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP sets the first coordinate\&. 
.br
\fIy\fP sets the second coordinate\&. 
.RE
.PP

.SS "void KillerEngine::Text::SetScale (const \fBKM::Vector4\fP & s)\fC [inline]\fP"
Sets the scale of the \fBText\fP and updates any Glyphs\&. Calls GameObject::SetScale() 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP is the Vector4 used as the scale\&. 
.RE
.PP

.SS "void Text::SetTextColor (const \fBColor\fP & col)"
Sets the color of each \fBGlyph\fP in the \fBText\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcol\fP is the \fBColor\fP each \fBGlyph\fP is set to\&. 
.RE
.PP

.SS "void Text::SetUniforms (string name, const \fBKM::Matrix4\fP & Matrix4)"
A wrapper function that calls GameObject::SetUniform on each \fBGlyph\fP using the input\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP is the name of the uniform that will be set\&. 
.br
\fIMatrix4\fP is the transformation Matrix4 to be used by each \fBGlyph\fP\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Killer Engine from the source code\&.
