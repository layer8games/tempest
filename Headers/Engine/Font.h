/*========================================================================


This is not free to use, and cannot be used without the express permission
of KillerWave.

Written by Maxwell Miller
========================================================================*/
#pragma once

//=====Engine includes=====
#include <Engine/Atom.h>
#include <Engine/Texture.h>
#include <Engine/Sprite.h>
#include <Engine/CharacterData.h>
#include <Engine/TextureManager.h>

//=====STL includes=====
#include <fstream>
#include <iostream>
#include <istream>
#include <vector>
#include <map>
#include <list>
#include <memory>

namespace KillerEngine
{
//==========================================================================================================================
//Documentation
//==========================================================================================================================
/*! The Font class is used to open a .fnt file, extract the needed character data, and then save that for text processing 
	later on.
	
	CreateCharacter is a CharSprite Factory. This may be important to know. */
	class Font
	{
	public:
//==========================================================================================================================
//
//Constructors
//
//==========================================================================================================================
/*! Default Constructor. No special actions taken. */
		Font(void);

/*! Copy Constructor. Calls GetTextureID(), GetFile() and GetName(). 
	\param f Font&: Font to be copied.*/
		Font(const Font& f);

/*! Copy Constructor. Calls GetTextureID(), GetFile() and GetName(). 
	\param f Font*: Font to be copied.*/
		Font(const Font* f);

/*! Single Value Constructor. No special actions taken.
	\param tID U32: Texture ID to be set. */
		explicit Font(U32 tID);

//==========================================================================================================================
//
//Font Functions
//
//==========================================================================================================================
/*! Initializes all data needed to be able to create RenderedCharacters as part of a RenderedText. Set's the fontName name, 
	which is currently not used. Later this will be used with a manager to class to find the font you need. Opens fontFile, 
	parses the file and extracts the needed character data. The only currently supported file format is a .fnt file. This 
	class has only been tested with .fnt files generated by BMFont tool found at http://www.angelcode.com/products/bmfont/
	\param fontName string. Name of the font you are creating.
	\param fontFile string. File Path to the .fnt file that is used to get the character data needed. */
		void InitFont(string fontName, string fontFile);

		CharacterData GetDataForCharacter(char c);

/*! Returns the map containing all data for all characters found in the loaded font. The ID of each character is found in 
	the .fnt file and is the ASCII int value of a char */
		inline std::map<U32, CharacterData> GetCharacterData(void) const
		{ 
			return _fontCharData; 
		}

		std::shared_ptr<Sprite> CreateCharacter(char character);

//==========================================================================================================================
//
//Operators
//
//==========================================================================================================================
/*! Copies Font pointer. Calls GetTextureID(), GetFile(), GetName() and GetCharacterData(). */
		Font& operator=(const Font* font);

/*! Copies Font reference. Calls GetTextureID(), GetFile(), GetName() and GetCharacterData(). */
		Font& operator=(const Font& font);

//==========================================================================================================================
//
//Accessors
//
//==========================================================================================================================
/*! Set's the file that the font will read its data from. Does not re-initialize the font. 
	TODO: Make sure that the font is re-initialized when this is called. 
	TODO: Check that the file that is sent is a .fnt file.
	\param fontFile string: File path to .fnt file. */
		inline void SetFile(string fontFile)
		{
		 	_fontFile = fontFile; 
		}

/*! Returns the file path to the current .fnt file the font is using. */
		inline const string GetFile(void) const
		{
			return _fontFile; 
		}

/*! Set's the name of font. Not used actively in any major way.
	\param fontName string: New name of the font. */
		inline void SetName(string fontName)
		{
			_fontName = fontName; 
		}

/*! Returns the current name of the font. Not used in any major way. */		
		inline const string GetName(void) const
		{
			return _fontName; 
		}

/*! Set's the texture ID for the current font. This does not re-initialize the font.
	\param tID U32: Id from the TextureManager for the new texture. */		
		inline void SetTexture(U32 tID)
		{
			_textureID = tID; 
		}

/*! Returns the current texture ID for the texture. */		
		inline const U32 GetTextureID(void) const
		{
			return  _textureID; 
		}

	private:
		U32 					 	 _textureID; 			///< ID for Texture loaded into the TextureManager.
		string  					 _fontFile;				///< File path to the .fnt file the texture uses.
		string  					 _fontName;				///< Name of the font. Not really used right now.
		U32     					 _headerSize = 26;		///< Size of the header section of the .fnt file. Soon to be deprectated.
		std::map<U32, CharacterData> _fontCharData;			///< All data from .fnt file stored in a RenderText can use for placement.

/*! Used to add new data to _fontCharData. All ARGS are string that are cast into U32 values for consumption by engine.
	\param id string: Single char used as ASCII id.
	\param x string: x coord in Texture for character.
	\param y string: y coord in Texture for character.
	\param width string: Width of character in Texture
	\param height string: Height of character in Texture.
	\param xoffset string: Amount of space on the x axis that should be padded into this charcter to look right when rendered
	\param yoffset string: Amount of space on the y axis that should be padded into this character to look right when rendered
	\param xadvance string: Amount of space this character needs to its right to look right when rendered. */
		void _AddNewCharacterData(string id,      string x,		   string y,
							  	  string width,   string height,   string xoffset,
							  	  string yoffset, string xadvance);
	};
}